# fly.toml app configuration file generated by `flyctl init`
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.

app = "my-integrated-discord-bot-and-site" # Replace with a unique app name on Fly.io
primary_region = "iad" # Choose a region closest to you, e.g., 'iad' (Ashburn), 'fra' (Frankfurt)

[build]
  dockerfile = "Dockerfile"

[env]
  # IMPORTANT: Set these as secrets/environment variables on Fly.io itself, NOT hardcoded here.
  # This section just shows default values or for local testing.
  PORT = "8080" # The port your internal web server listens on. Fly.io exposes this.
  WEBSITE_API_BASE_URL = "http://localhost:8080/api" # Bot calls internal Flask server.

# Expose the internal port for HTTP traffic
[[services]]
  internal_port = 8080 # The port Flask/Quart listens on inside the container
  protocol = "tcp"

  [[services.ports]]
    port = 80
    handlers = ["http"]
  [[services.ports]]
    port = 443
    handlers = ["tls", "http"]

  [services.concurrency]
    type = "connections"
    hard_limit = 100
    soft_limit = 80

  [[services.app_request]] # Ensure this applies to non-HTTP too, if for websockets
    # Configuration to ensure service keeps running
    processes = ["app"] # Link to your 'app' process defined below, if you have multiple.

# If your Dockerfile CMD specifies a single process (like python main.py),
# you might not need a [[processes]] section explicitly if `app = "your-app-name"` suffices.
# But if your Dockerfile is complex or CMD has different starting points:
# [[processes]]
#   type = "app" # Default type. 'worker' is also a valid type for background processes on Fly,
#                # but if it also serves web traffic, 'app' is fine.
#   cmd = ["python", "main.py"]
